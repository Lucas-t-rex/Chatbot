
import google.generativeai as genai
import requests
import os
from flask import Flask, request, jsonify
from datetime import datetime
from dotenv import load_dotenv
import base64
import threading
from pymongo import MongoClient
from sendgrid import SendGridAPIClient
from sendgrid.helpers.mail import Mail
from apscheduler.schedulers.background import BackgroundScheduler

CLIENT_NAME = "Neuro Solu√ß√µes em Tecnologia"
RESPONSIBLE_NUMBER = "554898389781"

load_dotenv()
EVOLUTION_API_URL = os.environ.get("EVOLUTION_API_URL")
EVOLUTION_API_KEY = os.environ.get("EVOLUTION_API_KEY", "1234") 
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")
MONGO_DB_URI = os.environ.get("MONGO_DB_URI")


try:
    client = MongoClient(MONGO_DB_URI)
    
    db_name = CLIENT_NAME.lower().replace(" ", "_").replace("-", "_")
    
    db = client[db_name] 
    conversation_collection = db.conversations
    
    print(f"‚úÖ Conectado ao MongoDB para o cliente: '{CLIENT_NAME}' no banco de dados '{db_name}'")
except Exception as e:
    print(f"‚ùå ERRO: N√£o foi poss√≠vel conectar ao MongoDB. Erro: {e}")

if GEMINI_API_KEY:
    try:
        genai.configure(api_key=GEMINI_API_KEY)
    except Exception as e:
        print(f"AVISO: A chave de API do Google n√£o foi configurada corretamente. Erro: {e}")
else:
    print("AVISO: A vari√°vel de ambiente GEMINI_API_KEY n√£o foi definida.")

conversations_cache = {}
message_buffer = {}
message_timers = {}

modelo_ia = None
try:
    modelo_ia = genai.GenerativeModel('gemini-2.5-flash') # Recomendo usar o 1.5-flash
    print("‚úÖ Modelo do Gemini inicializado com sucesso.")
except Exception as e:
    print(f"‚ùå ERRO: N√£o foi poss√≠vel inicializar o modelo do Gemini. Verifique sua API Key. Erro: {e}")

def save_conversation_to_db(contact_id, sender_name, customer_name, chat_session, tokens_used):
    """Salva o hist√≥rico, nomes e atualiza a contagem de tokens no MongoDB."""
    try:
        history_list = [
            {'role': msg.role, 'parts': [part.text for part in msg.parts]}
            for msg in chat_session.history
        ]
        
        update_payload = {
            'sender_name': sender_name, # Nome do contato no WhatsApp (Ex: Gauch√£o)
            'history': history_list,
            'last_interaction': datetime.now()
        }
        # Adiciona o nome real do cliente ao payload se ele for conhecido
        if customer_name:
            update_payload['customer_name'] = customer_name

        conversation_collection.update_one(
            {'_id': contact_id},
            {
                '$set': update_payload,
                '$inc': {
                    'total_tokens_consumed': tokens_used
                }
            },
            upsert=True
        )
    except Exception as e:
        print(f"‚ùå Erro ao salvar conversa no MongoDB para {contact_id}: {e}")

def load_conversation_from_db(contact_id):
    """Carrega o hist√≥rico de uma conversa do MongoDB, se existir."""
    try:
        result = conversation_collection.find_one({'_id': contact_id})
        if result:
            print(f"üß† Hist√≥rico anterior encontrado e carregado para {contact_id}.")
            return result
    except Exception as e:
        print(f"‚ùå Erro ao carregar conversa do MongoDB para {contact_id}: {e}")
    return None

# <<< NOVO >>> Fun√ß√£o para pegar as √∫ltimas mensagens e formatar para a notifica√ß√£o
def get_last_messages_summary(history, max_messages=4):
    """Formata as √∫ltimas mensagens de um hist√≥rico para um resumo leg√≠vel, ignorando prompts do sistema."""
    summary = []
    # Pega as √∫ltimas mensagens do hist√≥rico
    relevant_history = history[-max_messages:]
    
    for message in relevant_history:
        # Ignora as mensagens iniciais do sistema e do bot que n√£o s√£o parte da conversa real
        if message['role'] == 'user' and message['parts'][0].strip().startswith("A data e hora atuais s√£o:"):
            continue # Pula o prompt inicial
        if message['role'] == 'model' and message['parts'][0].strip().startswith("Entendido. A Regra de Ouro"):
            continue # Pula a confirma√ß√£o inicial do bot

        role = "Cliente" if message['role'] == 'user' else "Bot"
        text = message['parts'][0].strip()
        summary.append(f"*{role}:* {text}")
        
    if not summary:
        return "Nenhum hist√≥rico de conversa encontrado."
        
    return "\n".join(summary)

def gerar_resposta_ia(contact_id, sender_name, user_message, known_customer_name):
    """
    Gera uma resposta usando a IA, com l√≥gica robusta de cache e fallback para o banco de dados.
    """
    global modelo_ia, conversations_cache

    if not modelo_ia:
        return "Desculpe, estou com um problema interno (modelo IA n√£o carregado)."

    # --- L√ìGICA DE CACHE E RESTAURA√á√ÉO ---
    # Primeiro, tenta pegar a sess√£o de chat da mem√≥ria r√°pida (cache)
    cached_session_data = conversations_cache.get(contact_id)

    if cached_session_data:
        # Se encontrou no cache, usa a sess√£o que j√° existe. √â o caminho mais r√°pido.
        chat_session = cached_session_data['ai_chat_session']
        customer_name_in_cache = cached_session_data.get('customer_name')
        print(f"üß† Sess√£o para {contact_id} encontrada no cache.")
    else:
        # Se N√ÉO encontrou no cache, precisamos construir (ou reconstruir) a sess√£o.
        print(f"‚ö†Ô∏è Sess√£o para {contact_id} n√£o encontrada no cache. Reconstruindo...")
        
        horario_atual = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # Decide qual instru√ß√£o de nome usar (se j√° sabemos o nome ou n√£o)
        if known_customer_name:
            final_user_name_for_prompt = known_customer_name
            prompt_name_instruction = f"O nome do usu√°rio com quem voc√™ est√° falando √©: {final_user_name_for_prompt}. Trate-o por este nome."
        else:
            final_user_name_for_prompt = sender_name
            prompt_name_instruction = f"""
            REGRA CR√çTICA - CAPTURA DE NOME INTELIGENTE (PRIORIDADE M√ÅXIMA):
              Seu nome √© {{Lyra}} e voc√™ √© atendente da {{Neuro Solu√ß√µes em Tecnologia}}.
              Seu primeiro objetivo √© sempre descobrir o nome real do cliente, pois o nome de contato ('{sender_name}') pode ser um apelido. No entanto, voc√™ deve fazer isso de forma natural.
              1. Se a primeira mensagem do cliente for um simples cumprimento (ex: "oi", "boa noite"), pe√ßa o nome dele de forma direta e educada.
              2. Se a primeira mensagem do cliente j√° contiver uma pergunta (ex: "oi, qual o pre√ßo?", "quero saber como funciona"), voc√™ deve:
                 - Primeiro, acalmar o cliente dizendo que j√° vai responder.
                 - Em seguida, pe√ßa o nome para personalizar o atendimento.
                 - **IMPORTANTE**: Voc√™ deve guardar a pergunta original do cliente na mem√≥ria.
              3. Quando o cliente responder com o nome dele (ex: "Meu nome √© Marcos"), sua pr√≥xima resposta DEVE OBRIGATORIAMENTE:
                 - Come√ßar com a tag: `[NOME_CLIENTE]O nome do cliente √©: [Nome Extra√≠do].`
                 - Agradecer ao cliente pelo nome.
                 - **RESPONDER IMEDIATAMENTE √† pergunta original que ele fez no in√≠cio da conversa.** N√£o o fa√ßa perguntar de novo.
              - **IMPORTANTE**: A simples apresenta√ß√£o do nome do cliente (ex: "meu nome √© marcos") N√ÉO √© um motivo para interven√ß√£o. Continue a conversa normalmente nesses casos.

              EXEMPLO DE FLUXO IDEAL:
              Cliente: "boa noite, queria saber o pre√ßo do plano secret√°rio"
              Voc√™: "Boa noite! Claro, j√° te passo os detalhes do Plano Secret√°rio. Para que nosso atendimento fique mais pr√≥ximo, como posso te chamar?"
              Cliente: "pode me chamar de Marcos"
              Sua Resposta: "[NOME_CLIENTE]O nome do cliente √©: Marcos. Prazer em conhec√™-lo, Marcos! O Plano Secret√°rio custa R$500,00 por m√™s, mais a taxa de instala√ß√£o. Ele √© perfeito para quem precisa de agendamentos inteligentes e integrados. Quer saber mais sobre as funcionalidades dele?"
            """
        
        # Monta o prompt do sistema (a base de conhecimento do bot)
        prompt_inicial = f"""
              A data e hora atuais s√£o: {horario_atual}.
              {prompt_name_instruction}
              Dever : vender nosso produto e se quer saber sobre a empresa ou falar com o Lucas(Proprietario)
              =====================================================
              üÜò REGRA DE OURO: AN√ÅLISE DE INTEN√á√ÉO E INTERVEN√á√ÉO HUMANA (PRIORIDADE M√ÅXIMA)
              =====================================================
              - SUA TAREFA MAIS IMPORTANTE √â ANALISAR A INTEN√á√ÉO DO CLIENTE. Se a inten√ß√£o for falar com um humano, sua √∫nica a√ß√£o √© acionar a interven√ß√£o. ESTA REGRA SOBREP√ïE TODAS AS OUTRAS REGRAS DE COMPORTAMENTO.
              - CASOS PARA INTERVEN√á√ÉO OBRIGAT√ìRIA:
              - Pedidos expl√≠citos: "falar com o dono", "falar com o respons√°vel", "quero falar com um humano", "falar com o propriet√°rio", "quero fazer um investimento".
              - Perguntas complexas sem resposta: Pedidos de produtos/planos que n√£o existem, reclama√ß√µes graves, negocia√ß√µes de pre√ßos especiais.
              - IMPORTANTE: A simples apresenta√ß√£o do nome do cliente (ex: "meu nome √© marcos") N√ÉO √© um motivo para interven√ß√£o. Continue a conversa normalmente nesses casos.
              - COMO ACIONAR: Sua √öNICA resposta DEVE ser a tag abaixo, sem sauda√ß√µes, sem explica√ß√µes.
              [HUMAN_INTERVENTION] Motivo: [Resumo do motivo do cliente]
              - O QUE N√ÉO FAZER (ERRO CR√çTICO):
              - ERRADO: Cliente diz "Quero falar com o dono" e voc√™ responde "Compreendo, para isso, ligue para o n√∫mero X...".
              - CORRETO: Cliente diz "Quero falar com o dono" e sua resposta √© APENAS: [HUMAN_INTERVENTION] Motivo: Cliente solicitou falar com o dono.
              - Se a inten√ß√£o do cliente N√ÉO se encaixar nos casos acima, voc√™ deve seguir as regras de atendimento normais abaixo.
              =====================================================
              üè∑Ô∏è IDENTIDADE DO ATENDENTE
              =====================================================
              nome: {{Lyra}}
              sexo: {{Feminina}}
              idade: {{40}}
              fun√ß√£o: {{Atendente, vendedora, especialista em Ti e machine learning}} 
              papel: {{Voc√™ deve atender a pessoa, entender a necessidade da pessoa, vender o plano de acordo com a necessidade, tirar duvidas, ajudar.}}  (ex: tirar d√∫vidas, passar pre√ßos, enviar cat√°logos, agendar hor√°rios)
              =====================================================
              üè¢ IDENTIDADE DA EMPRESA
              =====================================================
              nome da empresa: {{Neuro Solu√ß√µes em Tecnologia}}
              setor: {{Tecnologia e Automa√ß√£o}} 
              miss√£o: {{Facilitar e organizar as empresas de clientes.}}
              valores: {{Organiza√ß√£o, trasparencia,persistencia e ascen√ß√£o.}}
              hor√°rio de atendimento: {{De segunda-feira a sexta-feira das 8:00 as 18:00}}
              endere√ßo: {{R. Pioneiro Alfredo Jos√© da Costa, 157 - Jardim Alvorada, Maring√° - PR, 87035-270}}
              =====================================================
              üèõÔ∏è HIST√ìRIA DA EMPRESA
              =====================================================
              {{Fundada em Maring√° - PR, em 2025, a Neuro Solu√ß√µes em Tecnologia nasceu com o prop√≥sito de unir inova√ß√£o e praticidade. Criada por profissionais apaixonados por tecnologia e automa√ß√£o, a empresa cresceu ajudando empreendedores a otimizar processos, economizar tempo e aumentar vendas por meio de chatbots e sistemas inteligentes.}}
              =====================================================
              ‚ÑπÔ∏è INFORMA√á√ïES GERAIS
              =====================================================
              p√∫blico-alvo: {{Empresas, empreendedores e prestadores de servi√ßo que desejam automatizar atendimentos e integrar intelig√™ncia artificial ao seu neg√≥cio.}}
              diferencial: {{Atendimento personalizado, chatbots sob medida e integra√ß√£o total com o WhatsApp e ferramentas de IA.}}
              tempo de mercado: {{Desde de 2025}}
              slogan: {{O futuro √© agora!}}
              =====================================================
              üíº SERVI√áOS / CARD√ÅPIO
              =====================================================
              - Plano Atendente: {{Atendente personalizada, configurada conforme a necessidade do cliente. Neste plano, o atendimento pode funcionar de tr√™s formas: Atendimento Aut√¥nomo, Interven√ß√£o Humana, Bifurca√ß√£o de Mensagens.}}
              - Plano Secret√°rio: {{Agendamento Inteligente, Avisos Autom√°ticos, Agenda Integrada.}}
              - Plano Premium: {{Em constru√ß√£o}}
              =====================================================
              üí∞ PLANOS E VALORES
              =====================================================
              Instala√ß√£o: {{R$200,00 taxa √∫nica}} para setup inicial do projeto e requisitos da IA. 
              plano Atendente: {{R$300,00 mensal}}
              Plano Secret√°rio: {{R$500,00 mensal}}
              plano avan√ßado: {{Em analise}}
              observa√ß√µes: {{valores podem variar conforme personaliza√ß√£o ou integra√ß√µes extras.}}
              =====================================================
              üß≠ COMPORTAMENTO E REGRAS DE ATENDIMENTO
              =====================================================
              - A√ß√µes: Seja profissional, emp√°tica, natural, use frases curtas, mantenha um tom positivo, ajude o cliente, entenda a necessidade para vender o plano ideal, use quebras de obje√ß√µes e, como √∫ltimo recurso, ofere√ßa uma semana gr√°tis antes de se despedir.
              - N√£o fazer: N√£o invente informa√ß√µes, n√£o discuta, n√£o compartilhe dados pessoais, n√£o responda fora de contexto e nunca deixe o cliente sair sem ter vendido, se poss√≠vel.
              =====================================================
              ‚öôÔ∏è PERSONALIDADE DO ATENDENTE
              =====================================================
              - Tom de voz: {{alegre, acolhedor, profissional, descontra√≠do}} 
              - Estilo: humano, prestativo e simp√°tico.
              - Emojis: usar com modera√ß√£o (m√°ximo 2 por mensagem).
              =====================================================
              PRONTO PARA ATENDER O CLIENTE
              =====================================================
              Quando o cliente enviar uma mensagem, cumprimente e inicie o atendimento de forma natural, usando o nome do cliente se dispon√≠vel, tente entender o que ele precisa e sempre coloque o cliente em primeiro lugar.
        """

        convo_start = [
            {'role': 'user', 'parts': [prompt_inicial]},
            {'role': 'model', 'parts': [f"Entendido. A Regra de Ouro e a captura de nome s√£o prioridades. Estou pronto."]}
        ]

        # Carrega o hist√≥rico da mem√≥ria de longo prazo (MongoDB)
        loaded_conversation = load_conversation_from_db(contact_id)
        old_history = []
        if loaded_conversation and 'history' in loaded_conversation:
            # Filtra o prompt antigo para n√£o o enviar duas vezes
            old_history = [msg for msg in loaded_conversation['history'] if not msg['parts'][0].strip().startswith("A data e hora atuais s√£o:")]
        
        # Inicia o chat combinando o novo prompt com o hist√≥rico antigo
        chat_session = modelo_ia.start_chat(history=convo_start + old_history)
        
        # Salva a sess√£o reconstru√≠da na mem√≥ria de curto prazo (cache)
        conversations_cache[contact_id] = {
            'ai_chat_session': chat_session, 
            'name': sender_name, 
            'customer_name': known_customer_name
        }
        customer_name_in_cache = known_customer_name

    # --- FIM DA L√ìGICA DE CACHE ---

    try:
        print(f"Enviando para a IA: '{user_message}' (De: {sender_name})")
        
        # O resto do c√≥digo continua como antes...
        input_tokens = modelo_ia.count_tokens(chat_session.history + [{'role':'user', 'parts': [user_message]}]).total_tokens
        resposta = chat_session.send_message(user_message)
        output_tokens = modelo_ia.count_tokens(resposta.text).total_tokens
        total_tokens_na_interacao = input_tokens + output_tokens
        
        print(f"üìä Consumo de Tokens: Entrada={input_tokens}, Sa√≠da={output_tokens}, Total={total_tokens_na_interacao}")
        
        ai_reply = resposta.text

        if ai_reply.strip().startswith("[NOME_CLIENTE]"):
            print("üìù Tag [NOME_CLIENTE] detectada. Extraindo e salvando nome...")
            try:
                full_response_part = ai_reply.split("O nome do cliente √©:")[1].strip()
                extracted_name = full_response_part.split('.')[0].strip()
                start_of_message_index = full_response_part.find(extracted_name) + len(extracted_name)
                ai_reply = full_response_part[start_of_message_index:].lstrip('.!?, ').strip()

                conversation_collection.update_one(
                    {'_id': contact_id},
                    {'$set': {'customer_name': extracted_name}},
                    upsert=True
                )
                # ATUALIZA O NOME NO CACHE TAMB√âM!
                conversations_cache[contact_id]['customer_name'] = extracted_name
                customer_name_in_cache = extracted_name
                print(f"‚úÖ Nome '{extracted_name}' salvo para o cliente {contact_id}.")

            except Exception as e:
                print(f"‚ùå Erro ao extrair o nome da tag: {e}")
                ai_reply = ai_reply.replace("[NOME_CLIENTE]", "").strip()

        if not ai_reply.strip().startswith("[HUMAN_INTERVENTION]"):
            save_conversation_to_db(contact_id, sender_name, customer_name_in_cache, chat_session, total_tokens_na_interacao)
        
        return ai_reply
    
    except Exception as e:
        print(f"‚ùå Erro ao comunicar com a API do Gemini: {e}")
        # Se der um erro grave, limpa o cache daquele usu√°rio para for√ßar uma reconstru√ß√£o limpa na pr√≥xima vez.
        if contact_id in conversations_cache:
            del conversations_cache[contact_id]
        return "Tive um pequeno problema para processar sua mensagem e precisei reiniciar nossa conversa. Voc√™ poderia repetir, por favor?"
    
def transcrever_audio_gemini(caminho_do_audio):
    """
    Envia um arquivo de √°udio para a API do Gemini e retorna a transcri√ß√£o em texto.
    """
    global modelo_ia 

    if not modelo_ia:
        print("‚ùå Modelo de IA n√£o inicializado. Imposs√≠vel transcrever.")
        return None

    print(f"üé§ Enviando √°udio '{caminho_do_audio}' para transcri√ß√£o no Gemini...")
    try:
        audio_file = genai.upload_file(
            path=caminho_do_audio, 
            mime_type="audio/ogg"
        )
        
        response = modelo_ia.generate_content(["Por favor, transcreva o √°udio a seguir.", audio_file])
        genai.delete_file(audio_file.name)
        
        if response.text:
            print(f"‚úÖ Transcri√ß√£o recebida: '{response.text}'")
            return response.text
        else:
            print("‚ö†Ô∏è A IA n√£o retornou texto para o √°udio. Pode ser um √°udio sem falas.")
            return None
    except Exception as e:
        print(f"‚ùå Erro ao transcrever √°udio com Gemini: {e}")
        return None

def send_whatsapp_message(number, text_message):
    """Envia uma mensagem de texto para um n√∫mero via Evolution API."""
    clean_number = number.split('@')[0]
    payload = {"number": clean_number, "textMessage": {"text": text_message}}
    headers = {"apikey": EVOLUTION_API_KEY, "Content-Type": "application/json"}
    
    try:
        response = requests.post(EVOLUTION_API_URL, json=payload, headers=headers)
        response.raise_for_status()
        print(f"‚úÖ Resposta da IA enviada com sucesso para {clean_number}\n")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro ao enviar mensagem para {clean_number}: {e}")

def gerar_e_enviar_relatorio_semanal():
    """Calcula um RESUMO do uso de tokens e envia por e-mail usando SendGrid."""
    print(f"üóìÔ∏è Gerando relat√≥rio semanal para o cliente: {CLIENT_NAME}...")
    
    SENDGRID_API_KEY = os.environ.get('SENDGRID_API_KEY')
    EMAIL_RELATORIOS = os.environ.get('EMAIL_RELATORIOS')

    if not all([SENDGRID_API_KEY, EMAIL_RELATORIOS]):
        print("‚ö†Ô∏è Vari√°veis SENDGRID_API_KEY e EMAIL_RELATORIOS n√£o configuradas. Relat√≥rio n√£o pode ser enviado.")
        return

    hoje = datetime.now()
    
    try:
        usuarios_do_bot = list(conversation_collection.find({}))
        numero_de_contatos = len(usuarios_do_bot)
        total_geral_tokens = 0
        media_por_contato = 0

        if numero_de_contatos > 0:
            for usuario in usuarios_do_bot:
                total_geral_tokens += usuario.get('total_tokens_consumed', 0)
            media_por_contato = total_geral_tokens / numero_de_contatos
        
        corpo_email_texto = f"""
        Relat√≥rio de Consumo Acumulado do Cliente: '{CLIENT_NAME}'
        Data do Relat√≥rio: {hoje.strftime('%d/%m/%Y')}

        --- RESUMO GERAL DE USO ---

        üë§ N√∫mero de Contatos √önicos: {numero_de_contatos}
        üî• Consumo Total de Tokens (Acumulado): {total_geral_tokens}
        üìä M√©dia de Tokens por Contato: {media_por_contato:.0f}

        ---------------------------
        Atenciosamente,
        Seu Sistema de Monitoramento.
        """

        message = Mail(
            from_email=EMAIL_RELATORIOS,
            to_emails=EMAIL_RELATORIOS,
            subject=f"Relat√≥rio Semanal de Tokens - {CLIENT_NAME} - {hoje.strftime('%d/%m')}",
            plain_text_content=corpo_email_texto
        )
        
        sendgrid_client = SendGridAPIClient(SENDGRID_API_KEY)
        response = sendgrid_client.send(message)
        
        if response.status_code == 202:
             print(f"‚úÖ Relat√≥rio semanal para '{CLIENT_NAME}' enviado com sucesso via SendGrid!")
        else:
             print(f"‚ùå Erro ao enviar e-mail via SendGrid. Status: {response.status_code}. Body: {response.body}")

    except Exception as e:
        print(f"‚ùå Erro ao gerar ou enviar relat√≥rio para '{CLIENT_NAME}': {e}")

app = Flask(__name__)

processed_messages = set() 

@app.route('/webhook', methods=['POST'])
def receive_webhook():
    """Recebe mensagens do WhatsApp enviadas pela Evolution API."""
    data = request.json
    print(f"üì¶ DADO BRUTO RECEBIDO NO WEBHOOK: {data}")

    try:
        message_data = data.get('data', {}) or data
        key_info = message_data.get('key', {})

        if key_info.get('fromMe'):
            sender_number_full = key_info.get('remoteJid')
            
            if not sender_number_full:
                return jsonify({"status": "ignored_from_me_no_sender"}), 200

            clean_number = sender_number_full.split('@')[0]
            
            if clean_number != RESPONSIBLE_NUMBER:
                print(f"‚û°Ô∏è  Mensagem do pr√≥prio bot ignorada (remetente: {clean_number}).")
                return jsonify({"status": "ignored_from_me"}), 200
            
            print(f"‚öôÔ∏è  Mensagem do pr√≥prio bot PERMITIDA (√© um comando do respons√°vel: {clean_number}).")

        message_id = key_info.get('id')
        if not message_id:
            return jsonify({"status": "ignored_no_id"}), 200

        if message_id in processed_messages:
            print(f"‚ö†Ô∏è Mensagem {message_id} j√° processada, ignorando.")
            return jsonify({"status": "ignored_duplicate"}), 200
        processed_messages.add(message_id)
        if len(processed_messages) > 1000:
            processed_messages.clear()

        threading.Thread(target=handle_message_buffering, args=(message_data,)).start()
        return jsonify({"status": "received"}), 200

    except Exception as e:
        print(f"‚ùå Erro inesperado no webhook: {e}")
        print("DADO QUE CAUSOU ERRO:", data)
        return jsonify({"status": "error"}), 500


def handle_responsible_command(message_content, responsible_number):
    """
    Processa comandos enviados pelo n√∫mero do respons√°vel.
    """
    print(f"‚öôÔ∏è  Processando comando do respons√°vel: '{message_content}'")
    
    command_parts = message_content.lower().strip().split()

    if len(command_parts) == 2 and command_parts[0] == "ok":
        customer_number_to_reactivate = command_parts[1].replace('@s.whatsapp.net', '').strip()
        
        try:
            customer = conversation_collection.find_one({'_id': customer_number_to_reactivate})

            if not customer:
                send_whatsapp_message(responsible_number, f"‚ö†Ô∏è *Aten√ß√£o:* O cliente com o n√∫mero `{customer_number_to_reactivate}` n√£o foi encontrado no banco de dados.")
                return 

            result = conversation_collection.update_one(
                {'_id': customer_number_to_reactivate},
                {'$set': {'intervention_active': False}}
            )

            if customer_number_to_reactivate in conversations_cache:
                del conversations_cache[customer_number_to_reactivate]
                print(f"üóëÔ∏è  Cache da conversa do cliente {customer_number_to_reactivate} limpo com sucesso.")

            if result.modified_count > 0:
                send_whatsapp_message(responsible_number, f"‚úÖ Atendimento autom√°tico reativado para o cliente `{customer_number_to_reactivate}`.")
                send_whatsapp_message(customer_number_to_reactivate, "Oi sou eu a Lyra novamente, voltei pro seu atendimento. se precisar de algo me diga! üòä")
            else:
                send_whatsapp_message(responsible_number, f"‚ÑπÔ∏è O atendimento para `{customer_number_to_reactivate}` j√° estava ativo. Nenhuma altera√ß√£o foi necess√°ria.")

        except Exception as e:
            print(f"‚ùå Erro ao tentar reativar cliente: {e}")
            send_whatsapp_message(responsible_number, f"‚ùå Ocorreu um erro t√©cnico ao tentar reativar o cliente. Verifique o log do sistema.")
            
    else:
        print("‚ö†Ô∏è Comando n√£o reconhecido do respons√°vel.")
        help_message = (
            "Comando n√£o reconhecido. ü§ñ\n\n"
            "Para reativar o atendimento de um cliente, envie a mensagem no formato exato:\n"
            "`ok <numero_do_cliente>`\n\n"
            "*(Exemplo):*\n`ok 5544912345678`"
        )
        send_whatsapp_message(responsible_number, help_message)
        return True 
    
def handle_message_buffering(message_data):
    """
    Esta fun√ß√£o recebe a mensagem, a coloca em um buffer e gerencia um timer.
    """
    try:
        key_info = message_data.get('key', {})
        sender_number_full = key_info.get('senderPn') or key_info.get('participant') or key_info.get('remoteJid')

        if not sender_number_full or sender_number_full.endswith('@g.us'):
            return

        clean_number = sender_number_full.split('@')[0]
        
        user_message_content = None
        message = message_data.get('message', {})
        
        if message.get('conversation'):
            user_message_content = message['conversation']
        elif message.get('extendedTextMessage'):
            user_message_content = message['extendedTextMessage'].get('text')
        elif message.get('audioMessage') and message.get('base64'):
            message_id = key_info.get('id')
            print(f"üé§ Mensagem de √°udio recebida de {clean_number}. Aguardando timer para transcrever.")
            audio_base64 = message['base64']
            audio_data = base64.b64decode(audio_base64)
            temp_audio_path = f"/tmp/audio_{clean_number}_{message_id}.ogg"
            with open(temp_audio_path, 'wb') as f:
                f.write(audio_data)
            user_message_content = transcrever_audio_gemini(temp_audio_path)
            os.remove(temp_audio_path)
            if not user_message_content:
                send_whatsapp_message(sender_number_full, "Desculpe, n√£o consegui entender o √°udio. Pode tentar novamente? üéß")
                return
        
        if not user_message_content:
            return

        # Adiciona a nova mensagem ao buffer do usu√°rio
        if clean_number not in message_buffer:
            message_buffer[clean_number] = []
        message_buffer[clean_number].append(user_message_content)
        print(f"üì• Mensagem de {clean_number} adicionada ao buffer. Buffer atual: {message_buffer[clean_number]}")

        # Se j√° existe um timer para este usu√°rio, cancele-o
        if clean_number in message_timers:
            message_timers[clean_number].cancel()

        # Inicia um novo timer de 15 segundos
        # Quando o timer acabar, ele chamar√° a fun√ß√£o _trigger_ai_processing
        timer = threading.Timer(10.0, _trigger_ai_processing, args=[message_data])
        message_timers[clean_number] = timer
        timer.start()
        print(f"‚è≥ Timer de 10s iniciado/reiniciado para {clean_number}.")

    except Exception as e:
        print(f"‚ùå Erro ao gerenciar buffer da mensagem: {e}")

def _trigger_ai_processing(message_data):
    """
    Esta fun√ß√£o √© chamada pelo timer. Ela pega todas as mensagens do buffer,
    junta-as e envia para a IA.
    """
    key_info = message_data.get('key', {})
    sender_number_full = key_info.get('senderPn') or key_info.get('participant') or key_info.get('remoteJid')
    clean_number = sender_number_full.split('@')[0]
    sender_name_from_wpp = message_data.get('pushName') or 'Cliente'
    
    # Verifica se ainda h√° mensagens no buffer (poderiam ter sido processadas)
    if clean_number not in message_buffer:
        return
        
    # Junta todas as mensagens do buffer com uma quebra de linha
    full_user_message = "\n".join(message_buffer[clean_number])
    
    # Limpa o buffer para este usu√°rio
    del message_buffer[clean_number]
    del message_timers[clean_number]
    
    print(f"‚è∞ Timer finalizado! Processando mensagem completa de {clean_number}: '{full_user_message}'")

    # A partir daqui, a l√≥gica √© a mesma que a sua antiga process_message
    if RESPONSIBLE_NUMBER and clean_number == RESPONSIBLE_NUMBER:
        handle_responsible_command(full_user_message, clean_number)
        return

    conversation_status = conversation_collection.find_one({'_id': clean_number})

    if conversation_status and conversation_status.get('intervention_active', False):
        print(f"‚è∏Ô∏è Conversa com {sender_name_from_wpp} ({clean_number}) pausada para atendimento humano.")
        return

    known_customer_name = conversation_status.get('customer_name') if conversation_status else None
    
    ai_reply = gerar_resposta_ia(clean_number, sender_name_from_wpp, full_user_message, known_customer_name)

    if ai_reply and ai_reply.strip().startswith("[HUMAN_INTERVENTION]"):
        # L√≥gica de interven√ß√£o humana (mantida igual)
        print(f"‚ÄºÔ∏è INTERVEN√á√ÉO HUMANA SOLICITADA para {sender_name_from_wpp} ({clean_number})")
        conversation_collection.update_one(
            {'_id': clean_number}, {'$set': {'intervention_active': True}}, upsert=True
        )
        send_whatsapp_message(sender_number_full, "Entendido. J√° notifiquei um de nossos especialistas para te ajudar pessoalmente. Por favor, aguarde um momento. üë®‚Äçüíº")
        if RESPONSIBLE_NUMBER:
            reason = ai_reply.replace("[HUMAN_INTERVENTION] Motivo:", "").strip()
            display_name = known_customer_name or sender_name_from_wpp
            conversa_db = load_conversation_from_db(clean_number)
            history_summary = "Nenhum hist√≥rico de conversa encontrado."
            if conversa_db and 'history' in conversa_db:
                history_summary = get_last_messages_summary(conversa_db['history'])
            notification_msg = (
                f"üîî *NOVA SOLICITA√á√ÉO DE ATENDIMENTO HUMANO* üîî\n\n"
                f"üë§ *Cliente:* {display_name}\n"
                f"üìû *N√∫mero:* `{clean_number}`\n\n"
                f"üí¨ *Motivo da Chamada:*\n_{reason}_\n\n"
                f"üìú *Resumo da Conversa:*\n{history_summary}\n\n"
                f"-----------------------------------\n"
                f"*A√á√ÉO NECESS√ÅRIA:*\nAp√≥s resolver, envie para *ESTE N√öMERO* o comando:\n`ok {clean_number}`"
            )
            send_whatsapp_message(f"{RESPONSIBLE_NUMBER}@s.whatsapp.net", notification_msg)
    elif ai_reply:
        print(f"ü§ñ Resposta da IA para {sender_name_from_wpp}: {ai_reply}")
        send_whatsapp_message(sender_number_full, ai_reply)

if __name__ == '__main__':
    if modelo_ia:
        print("\n=============================================")
        print("   CHATBOT WHATSAPP COM IA INICIADO")
        print(f"   CLIENTE: {CLIENT_NAME}")
        if not RESPONSIBLE_NUMBER:
            print("   AVISO: 'RESPONSIBLE_NUMBER' n√£o configurado. O recurso de interven√ß√£o humana n√£o notificar√° ningu√©m.")
        else:
            print(f"   Interven√ß√£o Humana notificar√°: {RESPONSIBLE_NUMBER}")
        print("=============================================")
        print("Servidor aguardando mensagens no webhook...")

        scheduler = BackgroundScheduler(daemon=True, timezone='America/Sao_Paulo') 
        scheduler.add_job(gerar_e_enviar_relatorio_semanal, 'cron', day_of_week='sun', hour=8, minute=0)
        scheduler.start()
        print("‚è∞ Agendador de relat√≥rios iniciado. O relat√≥rio ser√° enviado todo Domingo √†s 08:00.")
        
        import atexit
        atexit.register(lambda: scheduler.shutdown())
        
        app.run(host='0.0.0.0', port=8000)
    else:
        print("\nEncerrando o programa devido a erros na inicializa√ß√£o.")