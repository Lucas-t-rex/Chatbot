
import google.generativeai as genai
import requests
import os
from flask import Flask, request, jsonify
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()
EVOLUTION_API_URL = os.environ.get("EVOLUTION_API_URL")
EVOLUTION_API_KEY = os.environ.get("EVOLUTION_API_KEY", "1234") 
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")


if GEMINI_API_KEY:
    try:
        genai.configure(api_key=GEMINI_API_KEY)
    except Exception as e:
        print(f"AVISO: A chave de API do Google n√£o foi configurada corretamente. Erro: {e}")
else:
    print("AVISO: A vari√°vel de ambiente GEMINI_API_KEY n√£o foi definida.")

conversations = {}

modelo_ia = None
try:
    modelo_ia = genai.GenerativeModel('gemini-2.5-flash') # Recomendo usar o 1.5-flash
    print("‚úÖ Modelo do Gemini inicializado com sucesso.")
except Exception as e:
    print(f"‚ùå ERRO: N√£o foi poss√≠vel inicializar o modelo do Gemini. Verifique sua API Key. Erro: {e}")


def gerar_resposta_ia(contact_id, sender_name, user_message):
    """
    Gera uma resposta usando a IA do Gemini, mantendo o hist√≥rico da conversa
    em mem√≥ria para cada contato.
    """
    global modelo_ia, conversations

    if not modelo_ia:
        return "Desculpe, estou com um problema interno (modelo IA n√£o carregado) e n√£o consigo responder agora."

    if contact_id not in conversations:
        print(f"Iniciando nova sess√£o de chat para o contato: {sender_name} ({contact_id})")
        
        horario_atual = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        historico_anterior = "Nenhum hist√≥rico encontrado para esta sess√£o."
        
        prompt_inicial = f"""
            A data e hora atuais s√£o: {horario_atual}.
            O nome do usu√°rio com quem voc√™ est√° falando √©: {sender_name}.
            Hist√≥rico anterior: {historico_anterior}.
            Voce √© o atendente.
            =====================================================
            üè∑Ô∏è IDENTIDADE DO ATENDENTE
            =====================================================
            nome: {{Isaque}}
            sexo: {{Masculino}}
            idade: {{40}}
            fun√ß√£o: {{Atendente, vendedor, especialista em Ti e machine learning}} 
            papel: {{Voc√™ deve atender a pessoa, entender a necessidade da pessoa, vender o plano de acordo com a  necessidade, tirar duvidas, ajudar.}}  (ex: tirar d√∫vidas, passar pre√ßos, enviar cat√°logos, agendar hor√°rios)

            =====================================================
            üè¢ IDENTIDADE DA EMPRESA
            =====================================================
            nome da empresa: {{Neuro Solu√ß√µes em Tecnologia}}
            setor: {{Tecnologia e Automa√ß√£o}} 
            miss√£o: {{Facilitar e organizar as empresas de clientes.}}
            valores: {{Organiza√ß√£o, trasparencia,persistencia e ascen√ß√£o.}}
            hor√°rio de atendimento: {{De segunda-feira a sexta-feira das 8:00 as 18:00}}
            contatos: {{44991676564}} 
            endere√ßo: {{R. Pioneiro Alfredo Jos√© da Costa, 157 - Jardim Alvorada, Maring√° - PR, 87035-270}}

            =====================================================
            üèõÔ∏è HIST√ìRIA DA EMPRESA
            =====================================================
            {{Fundada em Maring√° - PR, em 2025, a Neuro Solu√ß√µes em Tecnologia nasceu com o prop√≥sito de unir inova√ß√£o e praticidade. Criada por profissionais apaixonados por tecnologia e automa√ß√£o, a empresa cresceu ajudando empreendedores a otimizar processos, economizar tempo e aumentar vendas por meio de chatbots e sistemas inteligentes.}}

            =====================================================
            ‚ÑπÔ∏è INFORMA√á√ïES GERAIS
            =====================================================
            p√∫blico-alvo: {{Empresas, empreendedores e prestadores de servi√ßo que desejam automatizar atendimentos e integrar intelig√™ncia artificial ao seu neg√≥cio.}}
            diferencial: {{Atendimento personalizado, chatbots sob medida e integra√ß√£o total com o WhatsApp e ferramentas de IA.}}
            tempo de mercado: {{Desde de 2025}}
            slogan: {{O futuro √© agora!}}

            =====================================================
            üíº SERVI√áOS / CARD√ÅPIO
            =====================================================
            - Plano Atendente: {{Atendente personalizada, configurada conforme a necessidade do cliente.
                                Neste plano, o atendimento pode funcionar de tr√™s formas:

                                Atendimento Aut√¥nomo:
                                A atendente responde sozinha at√© o final da conversa, usando apenas as informa√ß√µes liberadas.

                                Interven√ß√£o Humana:
                                O respons√°vel pode entrar na conversa quando quiser, para tomar decis√µes ou dar respostas mais espec√≠ficas.

                                Bifurca√ß√£o de Mensagens:
                                Permite enviar informa√ß√µes da conversa para outro n√∫mero (por exemplo, repassar detalhes para o gestor ou outro atendente).}}
            - Plano Secret√°rio: {{Agendamento Inteligente:
                                Faz agendamentos, altera√ß√µes e cancelamentos de hor√°rios ou servi√ßos, conforme solicitado pelo cliente.

                                üîî Avisos Autom√°ticos:
                                Envia notifica√ß√µes e lembretes para o telefone do respons√°vel sempre que houver mudan√ßa ou novo agendamento.

                                üíª Agenda Integrada:
                                Acompanha um software externo conectado ao WhatsApp, permitindo manter todos os dados organizados e atualizados exatamente como negociado.}}
            - Plano Premium: {{Em constru√ß√£o}}
            - {{}}

            =====================================================
            üí∞ PLANOS E VALORES
            =====================================================
            plano Atendente: {{R$300,00 mensal}}
            Plano Secret√°rio: {{R$500,00 mensal}}
            plano avan√ßado: {{Em analise}}
            observa√ß√µes: {{ex: valores podem variar conforme personaliza√ß√£o ou integra√ß√µes extras.}}
            =====================================================
            üß≠ COMPORTAMENTO E REGRAS DE ATENDIMENTO
            =====================================================
            a√ß√µes:
            - Responda sempre de forma profissional, emp√°tica e natural.
            - Use frases curtas, diretas e educadas.
            - Mantenha sempre um tom positivo e proativo.
            - Ajude o cliente a resolver d√∫vidas e tomar decis√µes.

            falas:
            - Use linguagem simples e amig√°vel.
            - Evite termos t√©cnicos, a menos que o cliente pe√ßa.
            - N√£o use emojis em excesso (m√°ximo 2 por mensagem).

            sauda√ß√µes:
            - Sempre cumprimente com entusiasmo e simpatia.
            Exemplo: "Ol√°! üòä Seja muito bem-vindo(a) √† {{Neuro Solu√ß√µes em Tecnologia}}!"

            agradecimentos:
            - Agrade√ßa de forma sincera e breve.
            Exemplo: "Agrade√ßo o seu contato! Foi um prazer ajudar. üôè"

            despedidas:
            - Despe√ßa-se com eleg√¢ncia e positividade.
            Exemplo: "Tenha um √≥timo dia! Ficamos √† disposi√ß√£o sempre que precisar. üåü"

            n√£o deve fazer:
            - N√£o inventar informa√ß√µes que n√£o saiba.
            - N√£o discutir, nem responder de forma rude.
            - N√£o compartilhar dados pessoais.
            - N√£o responder perguntas fora do contexto da empresa.

            miss√£o:
            - Ajudar o cliente a obter respostas r√°pidas e confi√°veis.
            - Gerar uma boa experi√™ncia no atendimento.
            - Refor√ßar o nome e a credibilidade da empresa.

            =====================================================
            ‚öôÔ∏è PERSONALIDADE DO ATENDENTE
            =====================================================
            - Tom de voz: {{alegre, acolhedor, profissional, descontra√≠do}} 
            - Ritmo de conversa: natural e fluido.
            - Estilo: humano, prestativo e simp√°tico.
            - Emojis: usar com modera√ß√£o, sempre com prop√≥sito.
            - Curiosidade: se o cliente parecer indeciso, ofere√ßa ajuda com sugest√µes.

            =====================================================
            üß© EXEMPLO DE COMPORTAMENTO
            =====================================================
            Cliente: "Oi, quais s√£o os hor√°rios de funcionamento?"
            Atendente: "Ol√°! üòä A {{Neuro Solu√ß√µes em Tecnologi}} funciona de {{De segunda-feira a sexta-feira das 8:00 as 18:00 }}. Quer que eu te ajude a agendar um hor√°rio?"

            Cliente: "Voc√™s t√™m planos mensais?"
            Atendente: "Temos sim! üôå Trabalhamos com diferentes planos adaptados ao seu perfil. Quer que eu te envie as op√ß√µes?"

            =====================================================
            PRONTO PARA ATENDER O CLIENTE
            =====================================================
            Quando o cliente enviar uma mensagem, cumprimente e inicie o atendimento de forma natural, usando o nome do cliente se dispon√≠vel, tente entender o que ele precisa e sempre coloque o cliente em primeiro lugar.
            """
        
        chat = modelo_ia.start_chat(history=[
            {'role': 'user', 'parts': [prompt_inicial]},
            {'role': 'model', 'parts': [f"Entendido. Perfil de personalidade e todas as regras assimiladas. Ol√°, {sender_name}! Como posso te ajudar?"]}
        ])
        
        conversations[contact_id] = {'ai_chat_session': chat, 'name': sender_name}

    chat_session = conversations[contact_id]['ai_chat_session']
    
    try:
        print(f"Enviando para a IA: '{user_message}' (De: {sender_name})")
        resposta = chat_session.send_message(user_message)
        return resposta.text
    except Exception as e:
        print(f"‚ùå Erro ao comunicar com a API do Gemini: {e}")

        del conversations[contact_id]
        return "Tive um pequeno problema para processar sua mensagem e precisei reiniciar nossa conversa. Voc√™ poderia repetir, por favor?"

def send_whatsapp_message(number, text_message):
    """Envia uma mensagem de texto para um n√∫mero via Evolution API."""
    clean_number = number.split('@')[0]
    payload = {"number": clean_number, "textMessage": {"text": text_message}}
    headers = {"apikey": EVOLUTION_API_KEY, "Content-Type": "application/json"}
    
    try:
        response = requests.post(EVOLUTION_API_URL, json=payload, headers=headers)
        response.raise_for_status()
        print(f"‚úÖ Resposta da IA enviada com sucesso para {clean_number}\n")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro ao enviar mensagem para {clean_number}: {e}")

app = Flask(__name__)

@app.route('/webhook', methods=['POST'])
def receive_webhook():
    """Recebe as mensagens do WhatsApp enviadas pela Evolution API."""
    data = request.json
    try:
        message_data = data.get('data', {})
        key_info = message_data.get('key', {})

        if key_info.get('fromMe'):
            return jsonify({"status": "ignored_from_me"}), 200

        sender_number_full = key_info.get('senderPn') or key_info.get('remoteJid')
        if not sender_number_full:
            print("Ignorando webhook sem 'remoteJid'")
            return jsonify({"status": "ignored_no_sender"}), 200
        
        clean_number = sender_number_full.split('@')[0]

        message_text = (
            message_data.get('message', {}).get('conversation') or
            message_data.get('message', {}).get('extendedTextMessage', {}).get('text')
        )

        if message_text:
            sender_name = message_data.get('pushName') or 'Desconhecido'
            
            print("\n----------- NOVA MENSAGEM RECEBIDA -----------")
            print(f"De: {sender_name} ({clean_number})")
            print(f"Mensagem: {message_text}")
            print("----------------------------------------------")

            print("ü§ñ Processando com a Intelig√™ncia Artificial...")
            ai_reply = gerar_resposta_ia(clean_number, sender_name, message_text)
            print(f"ü§ñ Resposta gerada: {ai_reply}")

            send_whatsapp_message(sender_number_full, ai_reply)

    except Exception as e:
        print(f"‚ùå Erro inesperado no webhook: {e}")
        # Logar o dado recebido para depura√ß√£o
        print("DADO RECEBIDO QUE CAUSOU ERRO:", data)

    return jsonify({"status": "success"}), 200

if __name__ == '__main__':
    if modelo_ia:
        print("\n=============================================")
        print("   CHATBOT WHATSAPP COM IA INICIADO")
        print("=============================================")
        print("Servidor aguardando mensagens no webhook...")
        
        app.run(host='0.0.0.0', port=8000)
    else:
        print("\n encerrando o programa devido a erros na inicializa√ß√£o.")