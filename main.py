
import google.generativeai as genai
import requests
import os
from flask import Flask, request, jsonify
from datetime import datetime
from dotenv import load_dotenv
import base64
import threading
from pymongo import MongoClient
from sendgrid import SendGridAPIClient
from sendgrid.helpers.mail import Mail
from apscheduler.schedulers.background import BackgroundScheduler

CLIENT_NAME = "Neuro Solu√ß√µes em Tecnologia"
RESPONSIBLE_NUMBER = "554898389781"

load_dotenv()
EVOLUTION_API_URL = os.environ.get("EVOLUTION_API_URL")
EVOLUTION_API_KEY = os.environ.get("EVOLUTION_API_KEY", "1234") 
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")
MONGO_DB_URI = os.environ.get("MONGO_DB_URI")

try:
    client = MongoClient(MONGO_DB_URI)
    
    db_name = CLIENT_NAME.lower().replace(" ", "_").replace("-", "_")
    
    db = client[db_name] # Conecta ao banco de dados espec√≠fico do cliente
    conversation_collection = db.conversations
    
    print(f"‚úÖ Conectado ao MongoDB para o cliente: '{CLIENT_NAME}' no banco de dados '{db_name}'")
except Exception as e:
    print(f"‚ùå ERRO: N√£o foi poss√≠vel conectar ao MongoDB. Erro: {e}")

if GEMINI_API_KEY:
    try:
        genai.configure(api_key=GEMINI_API_KEY)
    except Exception as e:
        print(f"AVISO: A chave de API do Google n√£o foi configurada corretamente. Erro: {e}")
else:
    print("AVISO: A vari√°vel de ambiente GEMINI_API_KEY n√£o foi definida.")

# Cache para conversas ativas (para evitar ler o DB a cada mensagem)
conversations_cache = {}

modelo_ia = None
try:
    modelo_ia = genai.GenerativeModel('gemini-2.5-flash') # Recomendo usar o 1.5-flash
    print("‚úÖ Modelo do Gemini inicializado com sucesso.")
except Exception as e:
    print(f"‚ùå ERRO: N√£o foi poss√≠vel inicializar o modelo do Gemini. Verifique sua API Key. Erro: {e}")

def save_conversation_to_db(contact_id, sender_name, chat_session, tokens_used):
    """Salva o hist√≥rico e atualiza a contagem de tokens no MongoDB."""
    try:
        history_list = [
            {'role': msg.role, 'parts': [part.text for part in msg.parts]}
            for msg in chat_session.history
        ]
        
        conversation_collection.update_one(
            {'_id': contact_id},
            {
                '$set': {
                    'sender_name': sender_name,
                    'history': history_list,
                    'last_interaction': datetime.now()
                },
                '$inc': {
                    'total_tokens_consumed': tokens_used
                }
            },
            upsert=True
        )
    except Exception as e:
        print(f"‚ùå Erro ao salvar conversa no MongoDB para {contact_id}: {e}")

def load_conversation_from_db(contact_id):
    """Carrega o hist√≥rico de uma conversa do MongoDB, se existir."""
    try:
        result = conversation_collection.find_one({'_id': contact_id})
        if result:
            print(f"üß† Hist√≥rico anterior encontrado e carregado para {contact_id}.")
            return result
    except Exception as e:
        print(f"‚ùå Erro ao carregar conversa do MongoDB para {contact_id}: {e}")
    return None

# <<< NOVO >>> Fun√ß√£o para pegar as √∫ltimas mensagens e formatar para a notifica√ß√£o
def get_last_messages_summary(history, max_messages=8):
    """Formata as √∫ltimas mensagens de um hist√≥rico para um resumo leg√≠vel, ignorando prompts do sistema."""
    summary = []
    # Pega as √∫ltimas mensagens do hist√≥rico
    relevant_history = history[-max_messages:]
    
    for message in relevant_history:
        # Ignora as mensagens iniciais do sistema e do bot que n√£o s√£o parte da conversa real
        if message['role'] == 'user' and message['parts'][0].strip().startswith("A data e hora atuais s√£o:"):
            continue # Pula o prompt inicial
        if message['role'] == 'model' and message['parts'][0].strip().startswith("Entendido. A Regra de Ouro"):
            continue # Pula a confirma√ß√£o inicial do bot

        role = "Cliente" if message['role'] == 'user' else "Bot"
        text = message['parts'][0].strip()
        summary.append(f"*{role}:* {text}")
        
    if not summary:
        return "Nenhum hist√≥rico de conversa encontrado."
        
    return "\n".join(summary)

def gerar_resposta_ia(contact_id, sender_name, user_message):
    """
    Gera uma resposta usando a IA, carregando/salvando o hist√≥rico no banco de dados
    e usando um cache para conversas ativas.
    """
    global modelo_ia, conversations_cache

    if not modelo_ia:
        return "Desculpe, estou com um problema interno (modelo IA n√£o carregado)."

    if contact_id not in conversations_cache:
        # <<< MUDAN√áA CR√çTICA: L√≥gica anti-contamina√ß√£o de mem√≥ria >>>
        
        # 1. Sempre criamos o prompt inicial com as regras mais recentes.
        horario_atual = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        prompt_inicial = f"""
                A data e hora atuais s√£o: {horario_atual}.
                O nome do usu√°rio com quem voc√™ est√° falando √©: {sender_name}.

                =====================================================
                üÜò REGRA DE OURO: AN√ÅLISE DE INTEN√á√ÉO E INTERVEN√á√ÉO HUMANA (PRIORIDADE M√ÅXIMA)
                =====================================================
                - SUA TAREFA MAIS IMPORTANTE √â ANALISAR A INTEN√á√ÉO DO CLIENTE.
                - Se a inten√ß√£o for falar com o dono, saber de valores, pre√ßos, forma de pagamento ou algo do tipo, acione a interven√ß√£o.  
                ESTA REGRA SOBREP√ïE TODAS AS OUTRAS REGRAS DE COMPORTAMENTO.
                - CASOS PARA INTERVEN√á√ÉO OBRIGAT√ìRIA:
                - "quanto custa", "qual valor", "quero pagar", "falar com o propriet√°rio", "quero fazer um investimento", "quero falar com o dono".
                - Pedidos de planos n√£o existentes, reclama√ß√µes graves, negocia√ß√µes de pre√ßo.
                - COMO ACIONAR:
                Sua √öNICA resposta deve ser a tag abaixo, sem sauda√ß√µes, sem explica√ß√µes.
                [HUMAN_INTERVENTION] Motivo: [Resumo do motivo do cliente]
                - ERRADO: Cliente pergunta "qual o pre√ßo" e voc√™ responde com valores.
                - CORRETO: Cliente pergunta "qual o pre√ßo" e voc√™ responde apenas:
                [HUMAN_INTERVENTION] Motivo: Cliente solicitou valores.

                =====================================================
                üè∑Ô∏è IDENTIDADE DO ATENDENTE
                =====================================================
                nome: {{Lyra}}
                sexo: {{Feminina}}
                idade: {{40}}
                fun√ß√£o: {{Atendente e assistente virtual da academia Dorean Fight}}
                papel: {{Entender o cliente, ajudar e agendar uma aula experimental gratuita.}}

                =====================================================
                üè¢ IDENTIDADE DA EMPRESA
                =====================================================
                nome da empresa: {{Dorean Fight}}
                setor: {{Academia de Artes Marciais}}
                miss√£o: {{Promover sa√∫de, disciplina e bem-estar atrav√©s das artes marciais.}}
                valores: {{Respeito, foco, evolu√ß√£o e supera√ß√£o.}}
                endere√ßo: {{R. Jo√£o Ernesto Ferreira, 2119 - Sala 2 - Centro, Mandaguari - PR (refer√™ncia: Barrac√£o antes do Cmei Mickey)}}
                hor√°rio de funcionamento: {{Segunda a Quinta das 06:00 √†s 21:00, Sexta das 06:00 √†s 20:00 e S√°bado das 14:00 √†s 16:00.}}
                instagram: {{https://www.instagram.com/doreanfight}}

                =====================================================
                üí™ MODALIDADES
                =====================================================
                - Kung Fu
                - Capoeira
                - Muay Thai
                - Jiu-Jitsu (adulto e infantil)

                =====================================================
                üß≠ COMPORTAMENTO E REGRAS DE ATENDIMENTO
                =====================================================
                1. Seja conciso. Responda em no m√°ximo 1 ou 2 frases.
                2. Nunca ofere√ßa a aula experimental na primeira mensagem ‚Äî primeiro entenda a necessidade.
                3. Se perguntarem sobre valores ‚Üí acione interven√ß√£o humana.
                4. Ap√≥s confirmar o agendamento, **n√£o repita a confirma√ß√£o**.
                5. Use apenas as informa√ß√µes do banco de dados da academia.
                6. Nunca deixe o cliente sair sem agendar uma aula experimental.
                7. Se o cliente quiser saber benef√≠cios ou hist√≥ria das modalidades, responda com base em informa√ß√µes reais da internet.
                8. Seja acolhedor, simp√°tico e motivador.

                =====================================================
                üí¨ FLUXO DE CONVERSA ESTRAT√âGICO
                =====================================================

                **PASSO 1: SAUDA√á√ÉO E ESCUTA ATIVA**
                - Cumprimente com entusiasmo e pergunte como pode ajudar.
                Exemplo: "Ol√°, {sender_name}! üëã Bem-vindo(a) √† Dorean Fight! Sou a Lyra, assistente virtual. Como posso te ajudar hoje?"

                **PASSO 2: RESPONDER E CONVIDAR (A√á√ÉO PRINCIPAL)**
                - Responda √† d√∫vida do cliente e, na mesma mensagem, convide para a aula experimental.
                Exemplo:
                Cliente: "Voc√™s t√™m kung fu pra crian√ßa?"
                Atendente: "Temos sim! O Kung Fu infantil √© √≥timo para disciplina e foco. Quer agendar uma aula experimental gratuita pra ele(a) conhecer?"

                **PASSO 3: AGENDAMENTO**
                - Pegue o dia e hor√°rio e confirme **uma √∫nica vez**.
                Exemplo:
                "Perfeito! Aula experimental agendada para amanh√£ √†s 19h. Est√° no nome de quem?"

                **PASSO 4: P√ìS-AGENDAMENTO (MODO AJUDA R√ÅPIDA)**
                - Ap√≥s o agendamento, apenas responda perguntas curtas, sem mencionar novamente o agendamento.
                Exemplo:
                Cliente: "Onde fica mesmo?"
                Atendente: "Ficamos na R. Jo√£o Ernesto Ferreira, 2119 - Centro, perto do Cmei Mickey. Quer o link do Instagram pra conferir as aulas?"

                =====================================================
                ‚öôÔ∏è PERSONALIDADE DO ATENDENTE
                =====================================================
                - Tom de voz: alegre, acolhedor e profissional.
                - Estilo: humano, prestativo e simp√°tico.
                - Emojis: usar com modera√ß√£o (m√°ximo 2 por mensagem).
                - Linguagem simples, natural e emp√°tica.
                - Evite frases longas ou explica√ß√µes cansativas.

                =====================================================
                üèÅ OBJETIVO FINAL
                =====================================================
                Levar o cliente a agendar uma aula experimental gratuita, garantindo uma conversa leve, simp√°tica e eficiente, e n√£o apssar o pre√ßo, passar interven√ß√£o humana.
                """
            
        # 2. Constru√≠mos o in√≠cio da conversa com as regras certas.
        convo_start = [
            {'role': 'user', 'parts': [prompt_inicial]},
            {'role': 'model', 'parts': [f"Entendido. A Regra de Ouro de Interven√ß√£o Humana √© a prioridade m√°xima. Estou pronto. Ol√°, {sender_name}! Como posso te ajudar?"]}
        ]

        # 3. Tentamos carregar o hist√≥rico antigo SE ele existir.
        loaded_conversation = load_conversation_from_db(contact_id)
        if loaded_conversation and 'history' in loaded_conversation:
            print(f"Iniciando chat para {sender_name} com hist√≥rico anterior.")
            # Filtramos o hist√≥rico antigo para remover o prompt antigo que estava salvo
            old_history = [msg for msg in loaded_conversation['history'] if not msg['parts'][0].strip().startswith("A data e hora atuais s√£o:")]
            chat = modelo_ia.start_chat(history=convo_start + old_history)
        else:
            print(f"Iniciando novo chat para {sender_name}.")
            chat = modelo_ia.start_chat(history=convo_start)
            
        conversations_cache[contact_id] = {'ai_chat_session': chat, 'name': sender_name}

    chat_session = conversations_cache[contact_id]['ai_chat_session']
    
    try:
        print(f"Enviando para a IA: '{user_message}' (De: {sender_name})")
        
        input_tokens = modelo_ia.count_tokens(chat_session.history + [{'role':'user', 'parts': [user_message]}]).total_tokens
        resposta = chat_session.send_message(user_message)
        output_tokens = modelo_ia.count_tokens(resposta.text).total_tokens
        total_tokens_na_interacao = input_tokens + output_tokens
        
        print(f"üìä Consumo de Tokens: Entrada={input_tokens}, Sa√≠da={output_tokens}, Total={total_tokens_na_interacao}")
        
        if not resposta.text.strip().startswith("[HUMAN_INTERVENTION]"):
            save_conversation_to_db(contact_id, sender_name, chat_session, total_tokens_na_interacao)
        
        return resposta.text
    
    except Exception as e:
        print(f"‚ùå Erro ao comunicar com a API do Gemini: {e}")
        if contact_id in conversations_cache:
            del conversations_cache[contact_id]
        return "Tive um pequeno problema para processar sua mensagem e precisei reiniciar nossa conversa. Voc√™ poderia repetir, por favor?"
    
def transcrever_audio_gemini(caminho_do_audio):
    """
    Envia um arquivo de √°udio para a API do Gemini e retorna a transcri√ß√£o em texto.
    """
    global modelo_ia # Vamos reutilizar o modelo Gemini que j√° foi iniciado

    if not modelo_ia:
        print("‚ùå Modelo de IA n√£o inicializado. Imposs√≠vel transcrever.")
        return None

    print(f"üé§ Enviando √°udio '{caminho_do_audio}' para transcri√ß√£o no Gemini...")
    try:
        audio_file = genai.upload_file(
            path=caminho_do_audio, 
            mime_type="audio/ogg"
        )
        
        # Pedimos ao modelo para transcrever o √°udio
        response = modelo_ia.generate_content(["Por favor, transcreva o √°udio a seguir.", audio_file])
        
        # Opcional, mas recomendado: deletar o arquivo do servidor do Google ap√≥s o uso
        genai.delete_file(audio_file.name)
        
        if response.text:
            print(f"‚úÖ Transcri√ß√£o recebida: '{response.text}'")
            return response.text
        else:
            print("‚ö†Ô∏è A IA n√£o retornou texto para o √°udio. Pode ser um √°udio sem falas.")
            return None
    except Exception as e:
        print(f"‚ùå Erro ao transcrever √°udio com Gemini: {e}")
        return None

def send_whatsapp_message(number, text_message):
    """Envia uma mensagem de texto para um n√∫mero via Evolution API."""
    clean_number = number.split('@')[0]
    payload = {"number": clean_number, "textMessage": {"text": text_message}}
    headers = {"apikey": EVOLUTION_API_KEY, "Content-Type": "application/json"}
    
    try:
        response = requests.post(EVOLUTION_API_URL, json=payload, headers=headers)
        response.raise_for_status()
        print(f"‚úÖ Resposta da IA enviada com sucesso para {clean_number}\n")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro ao enviar mensagem para {clean_number}: {e}")


def gerar_e_enviar_relatorio_semanal():
    """Calcula um RESUMO do uso de tokens e envia por e-mail usando SendGrid."""
    print(f"üóìÔ∏è Gerando relat√≥rio semanal para o cliente: {CLIENT_NAME}...")
    
    SENDGRID_API_KEY = os.environ.get('SENDGRID_API_KEY')
    EMAIL_RELATORIOS = os.environ.get('EMAIL_RELATORIOS')

    if not all([SENDGRID_API_KEY, EMAIL_RELATORIOS]):
        print("‚ö†Ô∏è Vari√°veis SENDGRID_API_KEY e EMAIL_RELATORIOS n√£o configuradas. Relat√≥rio n√£o pode ser enviado.")
        return

    hoje = datetime.now()
    
    try:
        usuarios_do_bot = list(conversation_collection.find({}))
        numero_de_contatos = len(usuarios_do_bot)
        total_geral_tokens = 0
        media_por_contato = 0

        if numero_de_contatos > 0:
            for usuario in usuarios_do_bot:
                total_geral_tokens += usuario.get('total_tokens_consumed', 0)
            media_por_contato = total_geral_tokens / numero_de_contatos
        
        corpo_email_texto = f"""
        Relat√≥rio de Consumo Acumulado do Cliente: '{CLIENT_NAME}'
        Data do Relat√≥rio: {hoje.strftime('%d/%m/%Y')}

        --- RESUMO GERAL DE USO ---

        üë§ N√∫mero de Contatos √önicos: {numero_de_contatos}
        üî• Consumo Total de Tokens (Acumulado): {total_geral_tokens}
        üìä M√©dia de Tokens por Contato: {media_por_contato:.0f}

        ---------------------------
        Atenciosamente,
        Seu Sistema de Monitoramento.
        """

        message = Mail(
            from_email=EMAIL_RELATORIOS,
            to_emails=EMAIL_RELATORIOS,
            subject=f"Relat√≥rio Semanal de Tokens - {CLIENT_NAME} - {hoje.strftime('%d/%m')}",
            plain_text_content=corpo_email_texto
        )
        
        sendgrid_client = SendGridAPIClient(SENDGRID_API_KEY)
        response = sendgrid_client.send(message)
        
        if response.status_code == 202:
             print(f"‚úÖ Relat√≥rio semanal para '{CLIENT_NAME}' enviado com sucesso via SendGrid!")
        else:
             print(f"‚ùå Erro ao enviar e-mail via SendGrid. Status: {response.status_code}. Body: {response.body}")

    except Exception as e:
        print(f"‚ùå Erro ao gerar ou enviar relat√≥rio para '{CLIENT_NAME}': {e}")

app = Flask(__name__)

processed_messages = set()  # para evitar loops

@app.route('/webhook', methods=['POST'])
def receive_webhook():
    """Recebe mensagens do WhatsApp enviadas pela Evolution API."""
    data = request.json
    print(f"üì¶ DADO BRUTO RECEBIDO NO WEBHOOK: {data}")

    try:
        message_data = data.get('data', {}) or data
        key_info = message_data.get('key', {})

        # --- 1Ô∏è‚É£ L√ìGICA CORRIGIDA: Ignora mensagens do bot, A MENOS que seja um comando do respons√°vel ---
        if key_info.get('fromMe'):
            # Pega o n√∫mero para verificar se √© a exce√ß√£o (o respons√°vel)
            sender_number_full = key_info.get('remoteJid')
            
            # Por seguran√ßa, se n√£o tivermos o n√∫mero, ignora.
            if not sender_number_full:
                return jsonify({"status": "ignored_from_me_no_sender"}), 200

            clean_number = sender_number_full.split('@')[0]
            
            # Se o n√∫mero que enviou a mensagem N√ÉO for o do respons√°vel, ignora.
            # Se FOR o do respons√°vel, a fun√ß√£o continua.
            if clean_number != RESPONSIBLE_NUMBER:
                print(f"‚û°Ô∏è  Mensagem do pr√≥prio bot ignorada (remetente: {clean_number}).")
                return jsonify({"status": "ignored_from_me"}), 200
            
            print(f"‚öôÔ∏è  Mensagem do pr√≥prio bot PERMITIDA (√© um comando do respons√°vel: {clean_number}).")

        # --- 2Ô∏è‚É£ Pega o ID √∫nico da mensagem ---
        message_id = key_info.get('id')
        if not message_id:
            return jsonify({"status": "ignored_no_id"}), 200

        # --- 3Ô∏è‚É£ Se j√° processou esta mensagem, ignora ---
        if message_id in processed_messages:
            print(f"‚ö†Ô∏è Mensagem {message_id} j√° processada, ignorando.")
            return jsonify({"status": "ignored_duplicate"}), 200
        processed_messages.add(message_id)
        if len(processed_messages) > 1000:
            processed_messages.clear()

        # --- 4Ô∏è‚É£ Retorna imediatamente 200 para evitar reenvio da Evolution ---
        threading.Thread(target=process_message, args=(message_data,)).start()
        return jsonify({"status": "received"}), 200

    except Exception as e:
        print(f"‚ùå Erro inesperado no webhook: {e}")
        print("DADO QUE CAUSOU ERRO:", data)
        return jsonify({"status": "error"}), 500


def handle_responsible_command(message_content, responsible_number):
    """
    Processa comandos enviados pelo n√∫mero do respons√°vel.
    """
    print(f"‚öôÔ∏è  Processando comando do respons√°vel: '{message_content}'")
    
    # Converte a mensagem para min√∫sculas para n√£o diferenciar "ok", "OK", "Ok", etc.
    command_parts = message_content.lower().strip().split()
    
    # --- Comando: ok <numero> ---
    # A verifica√ß√£o agora √© feita com "ok" em min√∫sculas
    if len(command_parts) == 2 and command_parts[0] == "ok":
        customer_number_to_reactivate = command_parts[1].replace('@s.whatsapp.net', '').strip()
        
        try:
            # Tenta encontrar o cliente para garantir que ele existe
            customer = conversation_collection.find_one({'_id': customer_number_to_reactivate})

            if not customer:
                send_whatsapp_message(responsible_number, f"‚ö†Ô∏è *Aten√ß√£o:* O cliente com o n√∫mero `{customer_number_to_reactivate}` n√£o foi encontrado no banco de dados.")
                return 

            # Atualiza o status de interven√ß√£o no banco de dados
            result = conversation_collection.update_one(
                {'_id': customer_number_to_reactivate},
                {'$set': {'intervention_active': False}}
            )

            # Limpa o cache da conversa para for√ßar a releitura do status
            if customer_number_to_reactivate in conversations_cache:
                del conversations_cache[customer_number_to_reactivate]
                print(f"üóëÔ∏è  Cache da conversa do cliente {customer_number_to_reactivate} limpo com sucesso.")

            if result.modified_count > 0:
                 # Envia confirma√ß√£o para o respons√°vel
                send_whatsapp_message(responsible_number, f"‚úÖ Atendimento autom√°tico reativado para o cliente `{customer_number_to_reactivate}`.")
                # Notifica o cliente que o bot est√° de volta
                send_whatsapp_message(customer_number_to_reactivate, "Obrigado por aguardar! Meu assistente virtual j√° est√° dispon√≠vel para continuar nosso atendimento. Como posso te ajudar? üòä")
            else:
                send_whatsapp_message(responsible_number, f"‚ÑπÔ∏è O atendimento para `{customer_number_to_reactivate}` j√° estava ativo. Nenhuma altera√ß√£o foi necess√°ria.")

        except Exception as e:
            print(f"‚ùå Erro ao tentar reativar cliente: {e}")
            send_whatsapp_message(responsible_number, f"‚ùå Ocorreu um erro t√©cnico ao tentar reativar o cliente. Verifique o log do sistema.")
            
    # --- Se n√£o for um comando conhecido, envia ajuda ---
    else:
        print("‚ö†Ô∏è Comando n√£o reconhecido do respons√°vel.")
        help_message = (
            "Comando n√£o reconhecido. ü§ñ\n\n"
            "Para reativar o atendimento de um cliente, envie a mensagem no formato exato:\n"
            "`ok <numero_do_cliente>`\n\n"
            "*(Exemplo):*\n`ok 5544912345678`"
        )
        send_whatsapp_message(responsible_number, help_message)
        return True # A mensagem do respons√°vel foi tratada (mesmo sendo inv√°lida)
    
def process_message(message_data):
    """
    Processa a mensagem, primeiro verificando se √© um comando do respons√°vel,
    e somente depois tratando como uma mensagem de cliente.
    """
    try:
        key_info = message_data.get('key', {})
        sender_number_full = key_info.get('senderPn') or key_info.get('participant') or key_info.get('remoteJid')

        # Ignora mensagens de grupo ou sem remetente
        if not sender_number_full or sender_number_full.endswith('@g.us'):
            return

        clean_number = sender_number_full.split('@')[0]
        sender_name = message_data.get('pushName') or 'Cliente'

        # Extrai o conte√∫do da mensagem (texto ou √°udio transcrito)
        user_message_content = None
        message = message_data.get('message', {})
        
        if message.get('conversation'):
            user_message_content = message['conversation']
        elif message.get('extendedTextMessage'):
            user_message_content = message['extendedTextMessage'].get('text')
        
        # <<< CORRE√á√ÉO 1: L√ìGICA DE √ÅUDIO AJUSTADA >>>
        # A chave 'base64' geralmente vem DENTRO de 'audioMessage', e n√£o fora.
        # Esta nova l√≥gica verifica isso corretamente.
        elif 'audioMessage' in message:
            audio_message = message['audioMessage']
            if 'mediaKey' in audio_message: # Usamos uma chave mais confi√°vel para detectar √°udio
                print(f"üé§ Mensagem de √°udio recebida de {sender_name} ({clean_number}).")
                
                # A API Evolution pode n√£o enviar 'base64', ent√£o precisamos buscar a m√≠dia
                # Esta √© uma abordagem mais robusta, mas por enquanto vamos manter a sua se funcionar.
                # Se a transcri√ß√£o parar, o ideal √© usar a rota /chat/getBase64FromMediaKey da Evolution API.
                # Por simplicidade, vamos assumir que o 'base64' pode estar em 'message'
                audio_base64 = message.get('base64') 

                if audio_base64:
                    audio_data = base64.b64decode(audio_base64)
                    temp_audio_path = f"/tmp/audio_{clean_number}.ogg"
                    with open(temp_audio_path, 'wb') as f:
                        f.write(audio_data)
                    
                    user_message_content = transcrever_audio_gemini(temp_audio_path)
                    os.remove(temp_audio_path)
                
                    if not user_message_content:
                        send_whatsapp_message(sender_number_full, "Desculpe, n√£o consegui entender o √°udio. Pode tentar novamente? üéß")
                        return
                else:
                    print("‚ö†Ô∏è √Åudio recebido, mas sem a chave 'base64' no webhook. A transcri√ß√£o foi ignorada.")


        if not user_message_content:
            print("‚û°Ô∏è Mensagem ignorada (sem conte√∫do √∫til).")
            return

        # =================================================================
        # L√ìGICA PRINCIPAL: O BOT DECIDE O QUE FAZER COM A MENSAGEM
        # =================================================================

        # <<< CORRE√á√ÉO 2: NORMALIZA√á√ÉO DO N√öMERO DO RESPONS√ÅVEL >>>
        # Esta l√≥gica remove o "nono d√≠gito" para garantir que a compara√ß√£o funcione
        # mesmo que a API envie o n√∫mero sem ele.
        responsible_num = RESPONSIBLE_NUMBER.strip() if RESPONSIBLE_NUMBER else ""
        
        # Remove o nono d√≠gito do n√∫mero do respons√°vel, se ele existir no padr√£o (55 XX 9 XXXX-XXXX)
        if len(responsible_num) == 13 and responsible_num.startswith('55') and responsible_num[4] == '9':
            responsible_num_normalized = responsible_num[:4] + responsible_num[5:]
        else:
            responsible_num_normalized = responsible_num

        # Agora, a compara√ß√£o √© feita com os n√∫meros j√° normalizados
        if responsible_num_normalized and clean_number.strip() == responsible_num_normalized:
            # Sim, a mensagem √© do respons√°vel. Trate como um comando.
            handle_responsible_command(user_message_content, clean_number)
            return

        # Caminho 2: A mensagem √© de um Cliente.
        # (Esta parte s√≥ executa se o 'if' acima for falso)
        
        # O bot est√° pausado para este cliente?
        conversation_status = conversation_collection.find_one({'_id': clean_number})
        if conversation_status and conversation_status.get('intervention_active', False):
            print(f"‚è∏Ô∏è  Conversa com {sender_name} ({clean_number}) pausada para atendimento humano.")
            return

        # Se n√£o estiver pausado, processe com a IA.
        print(f"\nüß†  Processando mensagem de {sender_name} ({clean_number}): '{user_message_content}'")
        ai_reply = gerar_resposta_ia(clean_number, sender_name, user_message_content)

        # Se a IA pediu ajuda humana...
        if ai_reply and ai_reply.strip().startswith("[HUMAN_INTERVENTION]"):
            print(f"‚ÄºÔ∏è INTERVEN√á√ÉO HUMANA SOLICITADA para {sender_name} ({clean_number})")
            
            # Pausa o bot para este cliente
            conversation_collection.update_one(
                {'_id': clean_number}, {'$set': {'intervention_active': True}}, upsert=True
            )
            
            # Avisa o cliente
            send_whatsapp_message(sender_number_full, "Entendido. J√° notifiquei um de nossos especialistas para te ajudar pessoalmente. Por favor, aguarde um momento. üë®‚Äçüíº")
            
            # Notifica o respons√°vel com os detalhes
            if RESPONSIBLE_NUMBER:
                  reason = ai_reply.replace("[HUMAN_INTERVENTION] Motivo:", "").strip()
                  conversa_db = load_conversation_from_db(clean_number)
                  
                  history_summary = "Nenhum hist√≥rico de conversa encontrado."
                  if conversa_db and 'history' in conversa_db:
                      history_summary = get_last_messages_summary(conversa_db['history'])

                  notification_msg = (
                      f"üîî *NOVA SOLICITA√á√ÉO DE ATENDIMENTO HUMANO* üîî\n\n"
                      f"üë§ *Cliente:* {sender_name}\n"
                      f"üìû *N√∫mero:* `{clean_number}`\n\n"
                      f"üí¨ *Motivo da Chamada:*\n_{reason}_\n\n"
                      f"üìú *Resumo da Conversa:*\n{history_summary}\n\n"
                      f"-----------------------------------\n"
                      # Altere a linha abaixo para usar "ok"
                      f"*A√á√ÉO NECESS√ÅRIA:*\nAp√≥s resolver, envie para *ESTE N√öMERO* o comando:\n`ok {clean_number}`"
                  )
                  send_whatsapp_message(f"{RESPONSIBLE_NUMBER}@s.whatsapp.net", notification_msg)
        
        # Se for uma resposta normal da IA...
        elif ai_reply:
            print(f"ü§ñ  Resposta da IA para {sender_name}: {ai_reply}")
            send_whatsapp_message(sender_number_full, ai_reply)

    except Exception as e:
        print(f"‚ùå Erro fatal ao processar mensagem: {e}")

if __name__ == '__main__':
    if modelo_ia:
        print("\n=============================================")
        print("   CHATBOT WHATSAPP COM IA INICIADO")
        print(f"   CLIENTE: {CLIENT_NAME}")
        if not RESPONSIBLE_NUMBER:
            print("   AVISO: 'RESPONSIBLE_NUMBER' n√£o configurado. O recurso de interven√ß√£o humana n√£o notificar√° ningu√©m.")
        else:
            print(f"   Interven√ß√£o Humana notificar√°: {RESPONSIBLE_NUMBER}")
        print("=============================================")
        print("Servidor aguardando mensagens no webhook...")

        scheduler = BackgroundScheduler(daemon=True, timezone='America/Sao_Paulo') 
        scheduler.add_job(gerar_e_enviar_relatorio_semanal, 'cron', day_of_week='sun', hour=8, minute=0)
        scheduler.start()
        print("‚è∞ Agendador de relat√≥rios iniciado. O relat√≥rio ser√° enviado todo Domingo √†s 08:00.")
        
        import atexit
        atexit.register(lambda: scheduler.shutdown())
        
        app.run(host='0.0.0.0', port=8000)
    else:
        print("\nEncerrando o programa devido a erros na inicializa√ß√£o.")