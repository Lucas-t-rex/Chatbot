
import google.generativeai as genai
import requests
import os
from flask import Flask, request, jsonify
from datetime import datetime, timedelta
from dotenv import load_dotenv
from urllib.parse import urlparse
import base64
import threading
from pymongo import MongoClient
from sendgrid import SendGridAPIClient
from sendgrid.helpers.mail import Mail
from apscheduler.schedulers.background import BackgroundScheduler


CLIENT_NAME = "Neuro Solu√ß√µes em Tecnologia"
RESPONSIBLE_NUMBER = "5548998389781"

load_dotenv()
EVOLUTION_API_URL = os.environ.get("EVOLUTION_API_URL")
EVOLUTION_API_KEY = os.environ.get("EVOLUTION_API_KEY", "1234") 
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")
MONGO_DB_URI = os.environ.get("MONGO_DB_URI")


try:
    client = MongoClient(MONGO_DB_URI)
    
    db_name = CLIENT_NAME.lower().replace(" ", "_").replace("-", "_")
    
    db = client[db_name] # Conecta ao banco de dados espec√≠fico do cliente
    conversation_collection = db.conversations
    
    print(f"‚úÖ Conectado ao MongoDB para o cliente: '{CLIENT_NAME}' no banco de dados '{db_name}'")
except Exception as e:
    print(f"‚ùå ERRO: N√£o foi poss√≠vel conectar ao MongoDB. Erro: {e}")

if GEMINI_API_KEY:
    try:
        genai.configure(api_key=GEMINI_API_KEY)
    except Exception as e:
        print(f"AVISO: A chave de API do Google n√£o foi configurada corretamente. Erro: {e}")
else:
    print("AVISO: A vari√°vel de ambiente GEMINI_API_KEY n√£o foi definida.")

# Cache para conversas ativas (para evitar ler o DB a cada mensagem)
conversations_cache = {}

modelo_ia = None
try:
    modelo_ia = genai.GenerativeModel('gemini-2.5-flash') # Recomendo usar o 1.5-flash
    print("‚úÖ Modelo do Gemini inicializado com sucesso.")
except Exception as e:
    print(f"‚ùå ERRO: N√£o foi poss√≠vel inicializar o modelo do Gemini. Verifique sua API Key. Erro: {e}")

def save_conversation_to_db(contact_id, sender_name, chat_session, tokens_used):
    """Salva o hist√≥rico e atualiza a contagem de tokens no MongoDB."""
    try:
        history_list = [
            {'role': msg.role, 'parts': [part.text for part in msg.parts]}
            for msg in chat_session.history
        ]
        
        conversation_collection.update_one(
            {'_id': contact_id},
            {
                '$set': {
                    'sender_name': sender_name,
                    'history': history_list,
                    'last_interaction': datetime.now()
                },
                '$inc': {
                    'total_tokens_consumed': tokens_used
                }
            },
            upsert=True
        )
    except Exception as e:
        print(f"‚ùå Erro ao salvar conversa no MongoDB para {contact_id}: {e}")

def load_conversation_from_db(contact_id):
    """Carrega o hist√≥rico de uma conversa do MongoDB, se existir."""
    try:
        result = conversation_collection.find_one({'_id': contact_id})
        if result:
            print(f"üß† Hist√≥rico anterior encontrado e carregado para {contact_id}.")
            return result
    except Exception as e:
        print(f"‚ùå Erro ao carregar conversa do MongoDB para {contact_id}: {e}")
    return None

# <<< NOVO >>> Fun√ß√£o para pegar as √∫ltimas mensagens e formatar para a notifica√ß√£o
def get_last_messages_summary(history, max_messages=6):
    """Formata as √∫ltimas mensagens de um hist√≥rico para um resumo leg√≠vel."""
    summary = []
    # Pega as √∫ltimas `max_messages` do hist√≥rico, ignorando o prompt inicial.
    relevant_history = history[-max_messages:]
    for message in relevant_history:
        role = "Cliente" if message['role'] == 'user' else "Bot"
        text = message['parts'][0].strip()
        if not text.startswith("Entendido. Perfil de personalidade"): # Ignora a confirma√ß√£o inicial do bot
             summary.append(f"*{role}:* {text}")
    return "\n".join(summary)

def gerar_resposta_ia(contact_id, sender_name, user_message):
    """
    Gera uma resposta usando a IA, carregando/salvando o hist√≥rico no banco de dados
    e usando um cache para conversas ativas.
    """
    global modelo_ia, conversations_cache

    if not modelo_ia:
        return "Desculpe, estou com um problema interno (modelo IA n√£o carregado)."

    if contact_id not in conversations_cache:
        # A vari√°vel aqui se chama `loaded_conversation` para ficar mais claro
        loaded_conversation = load_conversation_from_db(contact_id)
        
        # Verifica se a conversa foi carregada E se ela cont√©m a chave 'history'
        if loaded_conversation and 'history' in loaded_conversation:
            # <<< CORRE√á√ÉO AQUI >>> Passamos apenas a LISTA de hist√≥rico para a IA
            chat = modelo_ia.start_chat(history=loaded_conversation['history'])
        else:
            print(f"Iniciando nova sess√£o de chat para o contato: {sender_name} ({contact_id})")
   
            horario_atual = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            historico_anterior = "Nenhum hist√≥rico encontrado para esta sess√£o."
            prompt_inicial = f"""
                A data e hora atuais s√£o: {horario_atual}.
                O nome do usu√°rio com quem voc√™ est√° falando √©: {sender_name}.
                Hist√≥rico anterior: {historico_anterior}.
                Voce √© o atendente.
                =====================================================
                üè∑Ô∏è IDENTIDADE DO ATENDENTE
                =====================================================
                nome: {{Isaque}}
                sexo: {{Masculino}}
                idade: {{40}}
                fun√ß√£o: {{Atendente, vendedor, especialista em Ti e machine learning}} 
                papel: {{Voc√™ deve atender a pessoa, entender a necessidade da pessoa, vender o plano de acordo com a ¬†necessidade, tirar duvidas, ajudar.}} ¬†(ex: tirar d√∫vidas, passar pre√ßos, enviar cat√°logos, agendar hor√°rios)

                =====================================================
                üè¢ IDENTIDADE DA EMPRESA
                =====================================================
                nome da empresa: {{Neuro Solu√ß√µes em Tecnologia}}
                setor: {{Tecnologia e Automa√ß√£o}} 
                miss√£o: {{Facilitar e organizar as empresas de clientes.}}
                valores: {{Organiza√ß√£o, trasparencia,persistencia e ascen√ß√£o.}}
                hor√°rio de atendimento: {{De segunda-feira a sexta-feira das 8:00 as 18:00}}
                contatos: {{44991676564}} 
                endere√ßo: {{R. Pioneiro Alfredo Jos√© da Costa, 157 - Jardim Alvorada, Maring√° - PR, 87035-270}}

                =====================================================
                üèõÔ∏è HIST√ìRIA DA EMPRESA
                =====================================================
                {{Fundada em Maring√° - PR, em 2025, a Neuro Solu√ß√µes em Tecnologia nasceu com o prop√≥sito de unir inova√ß√£o e praticidade. Criada por profissionais apaixonados por tecnologia e automa√ß√£o, a empresa cresceu ajudando empreendedores a otimizar processos, economizar tempo e aumentar vendas por meio de chatbots e sistemas inteligentes.}}

                =====================================================
                ‚ÑπÔ∏è INFORMA√á√ïES GERAIS
                =====================================================
                p√∫blico-alvo: {{Empresas, empreendedores e prestadores de servi√ßo que desejam automatizar atendimentos e integrar intelig√™ncia artificial ao seu neg√≥cio.}}
                diferencial: {{Atendimento personalizado, chatbots sob medida e integra√ß√£o total com o WhatsApp e ferramentas de IA.}}
                tempo de mercado: {{Desde de 2025}}
                slogan: {{O futuro √© agora!}}

                =====================================================
                üíº SERVI√áOS / CARD√ÅPIO
                =====================================================
                - Plano Atendente: {{Atendente personalizada, configurada conforme a necessidade do cliente.
                                  Neste plano, o atendimento pode funcionar de tr√™s formas:

                                  Atendimento Aut√¥nomo:
                                  A atendente responde sozinha at√© o final da conversa, usando apenas as informa√ß√µes liberadas.

                                  Interven√ß√£o Humana:
                                  O respons√°vel pode entrar na conversa quando quiser, para tomar decis√µes ou dar respostas mais espec√≠ficas.

                                  Bifurca√ß√£o de Mensagens:
                                  Permite enviar informa√ß√µes da conversa para outro n√∫mero (por exemplo, repassar detalhes para o gestor ou outro atendente).}}
                - Plano Secret√°rio: {{Agendamento Inteligente:
                                  Faz agendamentos, altera√ß√µes e cancelamentos de hor√°rios ou servi√ßos, conforme solicitado pelo cliente.

                                  üîî Avisos Autom√°ticos:
                                  Envia notifica√ß√µes e lembretes para o telefone do respons√°vel sempre que houver mudan√ßa ou novo agendamento.

                                  üíª Agenda Integrada:
                                  Acompanha um software externo conectado ao WhatsApp, permitindo manter todos os dados organizados e atualizados exatamente como negociado.}}
                - Plano Premium: {{Em constru√ß√£o}}
                - {{}}

                =====================================================
                üí∞ PLANOS E VALORES
                =====================================================
                Instala√ß√£o: {{R$200,00 mensal}} todos os planos tem um fazer de setup inicial , para instala√ß√£o do projeto e os requisitos da IA. 
                plano Atendente: {{R$300,00 mensal}}
                Plano Secret√°rio: {{R$500,00 mensal}}
                plano avan√ßado: {{Em analise}}
                observa√ß√µes: {{ex: valores podem variar conforme personaliza√ß√£o ou integra√ß√µes extras.}}

                =====================================================
                üÜò REGRAS DE INTERVEN√á√ÉO HUMANA
                =====================================================
                - Sua principal tarefa √© identificar quando o cliente PRECISA falar com um humano.
                - Se o cliente pedir explicitamente para "falar com o dono", "falar com o respons√°vel", "falar com um humano", ou fizer uma pergunta muito complexa que voc√™ n√£o sabe responder (ex: um pedido de produto totalmente novo, um desconto muito espec√≠fico, uma reclama√ß√£o grave), voc√™ DEVE acionar a interven√ß√£o humana.
                - Para acionar a interven√ß√£o, sua √öNICA resposta deve seguir este formato EXATO:
                  [HUMAN_INTERVENTION] Motivo: [Escreva aqui um resumo curto do porqu√™ o cliente precisa de ajuda]
                - N√ÉO responda ao cliente que voc√™ vai chamar algu√©m. O sistema far√° isso. Sua √∫nica tarefa √© retornar a palavra-chave e o motivo.

                - Exemplo 1:
                  Cliente: "Quero falar com o dono da Neuro Solu√ß√µes"
                  Sua Resposta: [HUMAN_INTERVENTION] Motivo: O cliente pediu para falar com o dono.

                - Exemplo 2:
                  Cliente: "Voc√™s conseguem fazer um plano com X, Y e Z que n√£o est√° na lista e me dar um pre√ßo especial?"
                  Sua Resposta: [HUMAN_INTERVENTION] Motivo: O cliente solicita um plano e pre√ßo personalizados.
                  
                - Exemplo 3:
                  Cliente: "Obrigado, era s√≥ isso."
                  Sua Resposta: (Voc√™ responde normalmente, pois n√£o precisa de interven√ß√£o) "De nada! Se precisar de algo mais, estou √† disposi√ß√£o.! "

                =====================================================
                üß≠ COMPORTAMENTO E REGRAS DE ATENDIMENTO
                =====================================================
                a√ß√µes:
                - Responda sempre de forma profissional, emp√°tica e natural.
                - Use frases curtas, diretas e educadas.
                - Mantenha sempre um tom positivo e proativo.
                - Ajude o cliente a resolver d√∫vidas e tomar decis√µes.
                - Entender a nessecidade e vender o plano ideal para a pessoa.
                - Se a pessoa tiver obje√ß√£o para n√£o fechar tente enteder o porque.
                - Sempre usar quebra de obje√ß√µes quando o cliente n√£o querer fechar.
                - Se depois de tentar usar as quebras de obje√ß√£o a pessoa ainda n√£o querer fechar, ofere√ßa uma semana gratis.
                - Se mesmo oferecendo uma semana gratis, use agradecimentos e despedidas.

                falas:
                - Use linguagem simples e amig√°vel.
                - Evite termos t√©cnicos, a menos que o cliente pe√ßa.
                - N√£o use emojis em excesso (m√°ximo 2 por mensagem).

                sauda√ß√µes:
                - Sempre cumprimente com entusiasmo e simpatia.
                Exemplo: "Ol√°! üòä Seja muito bem-vindo(a) √† {{Neuro Solu√ß√µes em Tecnologia}}!"

                agradecimentos:
                - Agrade√ßa de forma sincera e breve.
                Exemplo: "Agrade√ßo o seu contato! Foi um prazer ajudar. üôè"

                despedidas:
                - Despe√ßa-se com eleg√¢ncia e positividade.
                Exemplo: "Tenha um √≥timo dia! Ficamos √† disposi√ß√£o sempre que precisar. üåü
                Neuro Solu√ß√µes em Tecnologia - O futuro √© agora."

                n√£o deve fazer:
                - N√£o inventar informa√ß√µes que n√£o saiba.
                - N√£o discutir, nem responder de forma rude.
                - N√£o compartilhar dados pessoais.
                - N√£o responder perguntas fora do contexto da empresa.
                - Nunca deixe o cliente sair sem ter vendido.

                miss√£o:
                - Ajudar o cliente a obter respostas r√°pidas e confi√°veis.
                - Entender a nessecidade e vender o plano ideal para a pessoa.
                - Gerar uma boa experi√™ncia no atendimento.
                - Refor√ßar o nome e a credibilidade da empresa.
                - Sempre usar quebra de obje√ß√µes quando o cliente n√£o querer fechar.

                =====================================================
                ‚öôÔ∏è PERSONALIDADE DO ATENDENTE
                =====================================================
                - Tom de voz: {{alegre, acolhedor, profissional, descontra√≠do}} 
                - Ritmo de conversa: natural e fluido.
                - Estilo: humano, prestativo e simp√°tico.
                - Emojis: usar com modera√ß√£o, sempre com prop√≥sito.
                - Curiosidade: se o cliente parecer indeciso, ofere√ßa ajuda com sugest√µes.
                - Converssas: N√£o use muitas palavras para n√£o ser cansativo.

                =====================================================
                üß© EXEMPLO DE COMPORTAMENTO
                =====================================================
                Cliente: "Oi, quais s√£o os hor√°rios de funcionamento?"
                Atendente: "Ol√°! üòä A {{Neuro Solu√ß√µes em Tecnologi}} funciona de {{De segunda-feira a sexta-feira das 8:00 as 18:00 }}. Quer que eu te ajude a agendar um hor√°rio?"

                Cliente: "Voc√™s t√™m planos mensais?"
                Atendente: "Temos sim! üôå Trabalhamos com diferentes planos adaptados ao seu perfil. Quer que eu te envie as op√ß√µes?"

                =====================================================
                PRONTO PARA ATENDER O CLIENTE
                =====================================================
                Quando o cliente enviar uma mensagem, cumprimente e inicie o atendimento de forma natural, usando o nome do cliente se dispon√≠vel, tente entender o que ele precisa e sempre coloque o cliente em primeiro lugar.
                """
            
            chat = modelo_ia.start_chat(history=[
                {'role': 'user', 'parts': [prompt_inicial]},
                {'role': 'model', 'parts': [f"Entendido. Perfil de personalidade e todas as regras assimiladas. Ol√°, {sender_name}! Como posso te ajudar?"]}
            ])
        
        # 4. Adicionamos a conversa (nova ou carregada) ao cache para acesso r√°pido.
        conversations_cache[contact_id] = {'ai_chat_session': chat, 'name': sender_name}

    # A partir daqui, o c√≥digo usa a sess√£o que est√° no cache.
    chat_session = conversations_cache[contact_id]['ai_chat_session']
    
    try:
        print(f"Enviando para a IA: '{user_message}' (De: {sender_name})")
        
        input_tokens = modelo_ia.count_tokens(chat_session.history + [{'role':'user', 'parts': [user_message]}]).total_tokens
        
        resposta = chat_session.send_message(user_message)
    
        output_tokens = modelo_ia.count_tokens(resposta.text).total_tokens
        total_tokens_na_interacao = input_tokens + output_tokens
        
        print(f"üìä Consumo de Tokens: Entrada={input_tokens}, Sa√≠da={output_tokens}, Total={total_tokens_na_interacao}")
        
        if not resposta.text.strip().startswith("[HUMAN_INTERVENTION]"):
            save_conversation_to_db(contact_id, sender_name, chat_session, total_tokens_na_interacao)
        
        return resposta.text
    except Exception as e:
        print(f"‚ùå Erro ao comunicar com a API do Gemini: {e}")

        if contact_id in conversations_cache:
            del conversations_cache[contact_id]
        
        return "Tive um pequeno problema para processar sua mensagem e precisei reiniciar nossa conversa. Voc√™ poderia repetir, por favor?"
    
def transcrever_audio_gemini(caminho_do_audio):
    """
    Envia um arquivo de √°udio para a API do Gemini e retorna a transcri√ß√£o em texto.
    """
    global modelo_ia # Vamos reutilizar o modelo Gemini que j√° foi iniciado

    if not modelo_ia:
        print("‚ùå Modelo de IA n√£o inicializado. Imposs√≠vel transcrever.")
        return None

    print(f"üé§ Enviando √°udio '{caminho_do_audio}' para transcri√ß√£o no Gemini...")
    try:
        audio_file = genai.upload_file(
            path=caminho_do_audio, 
            mime_type="audio/ogg"
        )
        
        # Pedimos ao modelo para transcrever o √°udio
        response = modelo_ia.generate_content(["Por favor, transcreva o √°udio a seguir.", audio_file])
        
        # Opcional, mas recomendado: deletar o arquivo do servidor do Google ap√≥s o uso
        genai.delete_file(audio_file.name)
        
        if response.text:
            print(f"‚úÖ Transcri√ß√£o recebida: '{response.text}'")
            return response.text
        else:
            print("‚ö†Ô∏è A IA n√£o retornou texto para o √°udio. Pode ser um √°udio sem falas.")
            return None
    except Exception as e:
        print(f"‚ùå Erro ao transcrever √°udio com Gemini: {e}")
        return None

def send_whatsapp_message(number, text_message):
    """Envia uma mensagem de texto para um n√∫mero via Evolution API."""
    clean_number = number.split('@')[0]
    payload = {"number": clean_number, "textMessage": {"text": text_message}}
    headers = {"apikey": EVOLUTION_API_KEY, "Content-Type": "application/json"}
    
    try:
        response = requests.post(EVOLUTION_API_URL, json=payload, headers=headers)
        response.raise_for_status()
        print(f"‚úÖ Resposta da IA enviada com sucesso para {clean_number}\n")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro ao enviar mensagem para {clean_number}: {e}")


def gerar_e_enviar_relatorio_semanal():
    """Calcula um RESUMO do uso de tokens e envia por e-mail usando SendGrid."""
    print(f"üóìÔ∏è Gerando relat√≥rio semanal para o cliente: {CLIENT_NAME}...")
    
    SENDGRID_API_KEY = os.environ.get('SENDGRID_API_KEY')
    EMAIL_RELATORIOS = os.environ.get('EMAIL_RELATORIOS')

    if not all([SENDGRID_API_KEY, EMAIL_RELATORIOS]):
        print("‚ö†Ô∏è Vari√°veis SENDGRID_API_KEY e EMAIL_RELATORIOS n√£o configuradas. Relat√≥rio n√£o pode ser enviado.")
        return

    hoje = datetime.now()
    
    try:
        usuarios_do_bot = list(conversation_collection.find({}))
        numero_de_contatos = len(usuarios_do_bot)
        total_geral_tokens = 0
        media_por_contato = 0

        if numero_de_contatos > 0:
            for usuario in usuarios_do_bot:
                total_geral_tokens += usuario.get('total_tokens_consumed', 0)
            media_por_contato = total_geral_tokens / numero_de_contatos
        
        corpo_email_texto = f"""
        Relat√≥rio de Consumo Acumulado do Cliente: '{CLIENT_NAME}'
        Data do Relat√≥rio: {hoje.strftime('%d/%m/%Y')}

        --- RESUMO GERAL DE USO ---

        üë§ N√∫mero de Contatos √önicos: {numero_de_contatos}
        üî• Consumo Total de Tokens (Acumulado): {total_geral_tokens}
        üìä M√©dia de Tokens por Contato: {media_por_contato:.0f}

        ---------------------------
        Atenciosamente,
        Seu Sistema de Monitoramento.
        """

        message = Mail(
            from_email=EMAIL_RELATORIOS,
            to_emails=EMAIL_RELATORIOS,
            subject=f"Relat√≥rio Semanal de Tokens - {CLIENT_NAME} - {hoje.strftime('%d/%m')}",
            plain_text_content=corpo_email_texto
        )
        
        sendgrid_client = SendGridAPIClient(SENDGRID_API_KEY)
        response = sendgrid_client.send(message)
        
        if response.status_code == 202:
             print(f"‚úÖ Relat√≥rio semanal para '{CLIENT_NAME}' enviado com sucesso via SendGrid!")
        else:
             print(f"‚ùå Erro ao enviar e-mail via SendGrid. Status: {response.status_code}. Body: {response.body}")

    except Exception as e:
        print(f"‚ùå Erro ao gerar ou enviar relat√≥rio para '{CLIENT_NAME}': {e}")

app = Flask(__name__)

processed_messages = set()  # para evitar loops

@app.route('/webhook', methods=['POST'])
def receive_webhook():
    """Recebe mensagens do WhatsApp enviadas pela Evolution API."""
    data = request.json
    print(f"üì¶ DADO BRUTO RECEBIDO NO WEBHOOK: {data}")

    try:
        message_data = data.get('data', {}) or data
        key_info = message_data.get('key', {})

        # --- 1Ô∏è‚É£ Ignora mensagens enviadas por voc√™ mesmo ---
        if key_info.get('fromMe'):
            return jsonify({"status": "ignored_from_me"}), 200

        # --- 2Ô∏è‚É£ Pega o ID √∫nico da mensagem ---
        message_id = key_info.get('id')
        if not message_id:
            return jsonify({"status": "ignored_no_id"}), 200

        # --- 3Ô∏è‚É£ Se j√° processou esta mensagem, ignora ---
        if message_id in processed_messages:
            print(f"‚ö†Ô∏è Mensagem {message_id} j√° processada, ignorando.")
            return jsonify({"status": "ignored_duplicate"}), 200
        processed_messages.add(message_id)
        if len(processed_messages) > 1000:
            processed_messages.clear()


        # --- 4Ô∏è‚É£ Retorna imediatamente 200 para evitar reenvio da Evolution ---
        threading.Thread(target=process_message, args=(message_data,)).start()
        return jsonify({"status": "received"}), 200

    except Exception as e:
        print(f"‚ùå Erro inesperado no webhook: {e}")
        print("DADO QUE CAUSOU ERRO:", data)
        return jsonify({"status": "error"}), 500


def process_message(message_data):
    """Processa a mensagem (texto ou √°udio) com a nova l√≥gica de interven√ß√£o humana."""
    try:
        sender_number_full = message_data.get('key', {}).get('remoteJid')
        
        if not sender_number_full or sender_number_full.endswith('@g.us'):
            return

        clean_number = sender_number_full.split('@')[0]
        sender_name = message_data.get('pushName') or 'Desconhecido'
        message = message_data.get('message', {})
        user_message_content = None

        # --- IN√çCIO DA L√ìGICA UNIFICADA (TEXTO E √ÅUDIO) ---
        # --- TEXTO ---
        if message.get('conversation') or message.get('extendedTextMessage'):
            user_message_content = message.get('conversation') or message.get('extendedTextMessage', {}).get('text')

        # --- √ÅUDIO (SEU C√ìDIGO ORIGINAL INTEGRADO) ---
        elif message.get('audioMessage') and message.get('base64'):
            print(f"üé§ Mensagem de √°udio recebida de {sender_name}.")
            audio_base64 = message['base64']
            audio_data = base64.b64decode(audio_base64)
            temp_audio_path = f"/tmp/audio_{clean_number}.ogg"
            with open(temp_audio_path, 'wb') as f:
                f.write(audio_data)
            
            transcribed_text = transcrever_audio_gemini(temp_audio_path)
            os.remove(temp_audio_path)
            
            if not transcribed_text:
                send_whatsapp_message(sender_number_full, "Desculpe, n√£o consegui entender o √°udio. Pode tentar novamente? üéß")
                return 
            user_message_content = transcribed_text
        # --- FIM DA L√ìGICA UNIFICADA ---

        # Se, ap√≥s checar texto e √°udio, n√£o houver conte√∫do, ignora.
        if not user_message_content:
            print("‚û°Ô∏è Mensagem ignorada (sem conte√∫do √∫til).")
            return

        # --- L√ìGICA DE INTERVEN√á√ÉO (INICIA AQUI) ---
        # Comando para o respons√°vel reativar o bot
        if RESPONSIBLE_NUMBER and clean_number == RESPONSIBLE_NUMBER:
            command_parts = user_message_content.lower().strip().split()
            if len(command_parts) == 2 and command_parts[0] == "reativar":
                customer_number_to_reactivate = command_parts[1]
                print(f"‚öôÔ∏è Comando recebido do respons√°vel para reativar: {customer_number_to_reactivate}")
                
                conversation_collection.update_one(
                    {'_id': customer_number_to_reactivate},
                    {'$set': {'intervention_active': False}},
                    upsert=True
                )
                
                send_whatsapp_message(sender_number_full, f"‚úÖ Atendimento autom√°tico reativado para o cliente {customer_number_to_reactivate}.")
                send_whatsapp_message(f"{customer_number_to_reactivate}@s.whatsapp.net", "Obrigado por aguardar! Meu assistente virtual j√° est√° dispon√≠vel para continuar nosso atendimento. Como posso te ajudar? üòä")
                return

        # Verifica se a conversa est√° em modo de interven√ß√£o humana
        conversation_status = conversation_collection.find_one({'_id': clean_number})
        if conversation_status and conversation_status.get('intervention_active', False):
            print(f"‚è∏Ô∏è Conversa com {sender_name} ({clean_number}) est√° em modo de interven√ß√£o humana. Mensagem ignorada.")
            return

        # L√≥gica principal de processamento da IA
        print(f"\nüß† Processando mensagem de {sender_name}: {user_message_content}")
        ai_reply = gerar_resposta_ia(clean_number, sender_name, user_message_content)

        # Se a IA pediu interven√ß√£o, executa a l√≥gica de transbordo
        if ai_reply.strip().startswith("[HUMAN_INTERVENTION]"):
            print(f"‚ÄºÔ∏è INTERVEN√á√ÉO HUMANA SOLICITADA para {sender_name} ({clean_number})")
            
            conversation_collection.update_one(
                {'_id': clean_number},
                {'$set': {'intervention_active': True}},
                upsert=True
            )
            
            send_whatsapp_message(sender_number_full, "Entendido. Vou notificar um de nossos especialistas para te ajudar pessoalmente. Por favor, aguarde um momento. üë®‚Äçüíº")
            
            if RESPONSIBLE_NUMBER:
                reason = ai_reply.replace("[HUMAN_INTERVENTION] Motivo:", "").strip()
                conversa_db = load_conversation_from_db(clean_number)
                history_summary = "Nenhum hist√≥rico recente encontrado."
                if conversa_db and 'history' in conversa_db:
                    history_summary = get_last_messages_summary(conversa_db['history'])

                notification_msg = (
                    f"üîî *NOVA SOLICITA√á√ÉO DE ATENDIMENTO HUMANO* üîî\n\n"
                    f"üë§ *Cliente:* {sender_name}\n"
                    f"üìû *N√∫mero:* `{clean_number}`\n\n"
                    f"üí¨ *Motivo da Chamada:*\n_{reason}_\n\n"
                    f"üìú *Resumo da Conversa:*\n{history_summary}\n\n"
                    f"-----------------------------------\n"
                    f"*A√á√ÉO NECESS√ÅRIA:*\nEntre em contato com o cliente. Ap√≥s resolver, envie para *ESTE N√öMERO* o comando:\n`reativar {clean_number}`"
                )
                
                send_whatsapp_message(f"{RESPONSIBLE_NUMBER}@s.whatsapp.net", notification_msg)
            else:
                print("‚ö†Ô∏è RESPONSIBLE_NUMBER n√£o definido. N√£o √© poss√≠vel notificar.")
        else:
            # Se n√£o for interven√ß√£o, envia a resposta normal da IA
            print(f"ü§ñ Resposta: {ai_reply}")
            send_whatsapp_message(sender_number_full, ai_reply)

    except Exception as e:
        print(f"‚ùå Erro fatal ao processar mensagem: {e}")

if __name__ == '__main__':
    if modelo_ia:
        print("\n=============================================")
        print("   CHATBOT WHATSAPP COM IA INICIADO")
        print(f"   CLIENTE: {CLIENT_NAME}")
        if not RESPONSIBLE_NUMBER:
            print("   AVISO: 'RESPONSIBLE_NUMBER' n√£o configurado. O recurso de interven√ß√£o humana n√£o notificar√° ningu√©m.")
        else:
            print(f"   Interven√ß√£o Humana notificar√°: {RESPONSIBLE_NUMBER}")
        print("=============================================")
        print("Servidor aguardando mensagens no webhook...")

        scheduler = BackgroundScheduler(daemon=True, timezone='America/Sao_Paulo') 
        scheduler.add_job(gerar_e_enviar_relatorio_semanal, 'cron', day_of_week='sun', hour=8, minute=0)
        scheduler.start()
        print("‚è∞ Agendador de relat√≥rios iniciado. O relat√≥rio ser√° enviado todo Domingo √†s 08:00.")
        
        import atexit
        atexit.register(lambda: scheduler.shutdown())
        
        app.run(host='0.0.0.0', port=8000)
    else:
        print("\nEncerrando o programa devido a erros na inicializa√ß√£o.")